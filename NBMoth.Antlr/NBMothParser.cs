namespace NBMoth.Antlr {

	//------------------------------------------------------------------------------
	// <auto-generated>
	//     This code was generated by a tool.
	//     ANTLR Version: 4.9.2
	//
	//     Changes to this file may cause incorrect behavior and will be lost if
	//     the code is regenerated.
	// </auto-generated>
	//------------------------------------------------------------------------------

	// Generated from c:\source\nbmoth-parser-only\NBMothAntlr\NBMothParser.g4 by ANTLR 4.9.2

	// Unreachable code detected
#pragma warning disable 0162
	// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
	// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
	// Ambiguous reference in cref attribute
#pragma warning disable 419


	//package de.bmoth.antlr;

	using System;
	using System.IO;
	using System.Text;
	using System.Diagnostics;
	using System.Collections.Generic;
	using Antlr4.Runtime;
	using Antlr4.Runtime.Atn;
	using Antlr4.Runtime.Misc;
	using Antlr4.Runtime.Tree;
	using DFA = Antlr4.Runtime.Dfa.DFA;

	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
	[System.CLSCompliant(false)]
	public partial class NBMothParser : Parser
	{
		protected static DFA[] decisionToDFA;
		protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
		public const int
			Number = 1, MACHINE = 2, END = 3, CONSTANTS = 4, PROPERTIES = 5, VARIABLES = 6, INVARIANT = 7,
			OPERATIONS = 8, INITIALISATION = 9, SETS = 10, DEFINITIONS = 11, BEGIN = 12, SKIP_SUB = 13,
			IF = 14, ELSIF = 15, THEN = 16, ELSE = 17, PRE = 18, ASSERT = 19, CHOICE = 20, SUBSTITUTION_OR = 21,
			SELECT = 22, WHEN = 23, CASE = 24, OF = 25, EITHER = 26, ANY = 27, WHERE = 28, LET = 29,
			BE = 30, IN = 31, VAR = 32, WHILE = 33, VARIANT = 34, DO = 35, DOT = 36, FOR_ANY = 37,
			EXITS = 38, LAMBDA = 39, ASSIGN = 40, DOUBLE_COLON = 41, EQUIVALENCE = 42, IMPLIES = 43,
			LEFT_BRACE = 44, RIGHT_BRACE = 45, LEFT_PAR = 46, RIGHT_PAR = 47, LEFT_BRACKET = 48,
			RIGHT_BRACKET = 49, MINUS = 50, SET_SUBTRACTION = 51, PLUS = 52, SINGLE_QUOTE = 53,
			TILDE = 54, SEMICOLON = 55, VERTICAL_BAR = 56, DOUBLE_VERTICAL_BAR = 57, COMMA = 58,
			REC = 59, STRUCT = 60, OUTPUT_PARAMS = 61, NOT = 62, BOOL_CAST = 63, AND = 64, OR = 65,
			OVERWRITE_RELATION = 66, DIRECT_PRODUCT = 67, CONCAT = 68, DOMAIN_RESTRICTION = 69,
			DOMAIN_SUBTRACTION = 70, RANGE_RESTRICTION = 71, RANGE_SUBTRACTION = 72, INSERT_FRONT = 73,
			INSERT_TAIL = 74, INTERSECTION = 75, RESTRICT_FRONT = 76, RESTRICT_TAIL = 77,
			MAPLET = 78, UNION = 79, UNDERSCORE = 80, MULT = 81, DIVIDE = 82, MOD = 83, POWER_OF = 84,
			INTERVAL = 85, EQUAL = 86, DOUBLE_EQUAL = 87, NOT_EQUAL = 88, COLON = 89, ELEMENT_OF = 90,
			INCLUSION = 91, STRICT_INCLUSION = 92, NON_INCLUSION = 93, STRICT_NON_INCLUSION = 94,
			NOT_BELONGING = 95, LESS = 96, LESS_EQUAL = 97, GREATER = 98, GREATER_EQUAL = 99,
			TRUE = 100, FALSE = 101, SET_RELATION = 102, PARTIAL_FUNCTION = 103, TOTAL_FUNCTION = 104,
			TOTAL_INJECTION = 105, PARTIAL_INJECTION = 106, TOTAL_SURJECTION = 107, PARTIAL_SURJECTION = 108,
			TOTAL_BIJECTION = 109, PARTIAL_BIJECTION = 110, TOTAL_RELATION = 111, SURJECTION_RELATION = 112,
			TOTAL_SURJECTION_RELATION = 113, DOM = 114, RAN = 115, CARD = 116, CONC = 117, FIRST = 118,
			FRONT = 119, ID = 120, ISEQ = 121, ISEQ1 = 122, LAST = 123, MAX = 124, MIN = 125, POW = 126,
			REV = 127, SEQ = 128, SEQ1 = 129, TAIL = 130, GENERALIZED_UNION = 131, GENERALIZED_INTER = 132,
			NATURAL = 133, NATURAL1 = 134, INTEGER = 135, INT = 136, NAT = 137, NAT1 = 138, BOOL = 139,
			MININT = 140, MAXINT = 141, SIGMA = 142, PI = 143, QUANTIFIED_UNION = 144, QUANTIFIED_INTER = 145,
			StringLiteral = 146, IDENTIFIER = 147, COMMENT = 148, LINE_COMMENT = 149, WS = 150,
			B_END = 151, ErrorCharacter = 152, LTL_TRUE = 153, LTL_FALSE = 154, LTL_IMPLIES = 155,
			LTL_AND = 156, LTL_OR = 157, LTL_NOT = 158, LTL_LEFT_PAR = 159, LTL_RIGHT_PAR = 160,
			LTL_GLOBALLY = 161, LTL_FINALLY = 162, LTL_UNTIL = 163, LTL_WEAK_UNTIL = 164,
			LTL_RELEASE = 165, LTL_NEXT = 166, LTL_B_START = 167, LTL_WS = 168, LTL_ErrorCharacter = 169;
		public const int
			RULE_start = 0, RULE_parse_unit = 1, RULE_machine_clause = 2, RULE_set_definition = 3,
			RULE_definition_clause = 4, RULE_single_definition = 5, RULE_definition_body = 6,
			RULE_single_operation = 7, RULE_quantified_variables_list = 8, RULE_identifier_list = 9,
			RULE_substitution = 10, RULE_expression_list = 11, RULE_formula = 12,
			RULE_predicate = 13, RULE_expression = 14, RULE_ltlStart = 15, RULE_ltlFormula = 16;
		public static readonly string[] ruleNames = {
		"start", "parse_unit", "machine_clause", "set_definition", "definition_clause",
		"single_definition", "definition_body", "single_operation", "quantified_variables_list",
		"identifier_list", "substitution", "expression_list", "formula", "predicate",
		"expression", "ltlStart", "ltlFormula"
	};

		private static readonly string[] _LiteralNames = {
		null, null, "'MACHINE'", "'END'", "'CONSTANTS'", "'PROPERTIES'", "'VARIABLES'",
		"'INVARIANT'", "'OPERATIONS'", "'INITIALISATION'", "'SETS'", "'DEFINITIONS'",
		"'BEGIN'", "'skip'", "'IF'", "'ELSIF'", "'THEN'", "'ELSE'", "'PRE'", "'ASSERT'",
		"'CHOICE'", "'OR'", "'SELECT'", "'WHEN'", "'CASE'", "'OF'", "'EITHER'",
		"'ANY'", "'WHERE'", "'LET'", "'BE'", "'IN'", "'VAR'", "'WHILE'", "'VARIANT'",
		"'DO'", "'.'", null, null, null, "':='", null, null, null, "'{'", null,
		null, null, "'['", "']'", null, "'\\'", "'+'", "'''", null, "';'", "'|'",
		null, "','", "'rec'", "'struct'", "'<--'", null, "'bool'", null, null,
		"'<+'", null, "'^'", "'<|'", "'<<|'", "'|>'", "'|>>'", null, null, null,
		null, null, null, null, "'_'", "'*'", "'/'", "'mod'", "'**'", null, "'='",
		null, null, "':'", "'\u2208'", null, null, null, null, null, "'<'", null,
		"'>'", null, "'TRUE'", "'FALSE'", null, null, null, null, null, null,
		null, null, "'>+>>'", "'<<->'", "'<->>'", "'<<->>'", "'dom'", "'ran'",
		"'card'", "'conc'", "'first'", "'front'", "'id'", "'iseq'", "'iseq1'",
		"'last'", "'max'", "'min'", "'POW'", "'rev'", "'seq'", "'seq1'", "'tail'",
		null, "'inter'", null, null, null, "'INT'", "'NAT'", "'NAT1'", "'BOOL'",
		"'MININT'", "'MAXINT'", null, null, "'UNION'", "'INTER'", null, null,
		null, null, null, null, null, "'true'", "'false'", "'=>'", null, null,
		"'not'", null, null, "'G'", "'F'", "'U'", "'W'", "'R'", "'X'"
	};
		private static readonly string[] _SymbolicNames = {
		null, "Number", "MACHINE", "END", "CONSTANTS", "PROPERTIES", "VARIABLES",
		"INVARIANT", "OPERATIONS", "INITIALISATION", "SETS", "DEFINITIONS", "BEGIN",
		"SKIP_SUB", "IF", "ELSIF", "THEN", "ELSE", "PRE", "ASSERT", "CHOICE",
		"SUBSTITUTION_OR", "SELECT", "WHEN", "CASE", "OF", "EITHER", "ANY", "WHERE",
		"LET", "BE", "IN", "VAR", "WHILE", "VARIANT", "DO", "DOT", "FOR_ANY",
		"EXITS", "LAMBDA", "ASSIGN", "DOUBLE_COLON", "EQUIVALENCE", "IMPLIES",
		"LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAR", "RIGHT_PAR", "LEFT_BRACKET",
		"RIGHT_BRACKET", "MINUS", "SET_SUBTRACTION", "PLUS", "SINGLE_QUOTE", "TILDE",
		"SEMICOLON", "VERTICAL_BAR", "DOUBLE_VERTICAL_BAR", "COMMA", "REC", "STRUCT",
		"OUTPUT_PARAMS", "NOT", "BOOL_CAST", "AND", "OR", "OVERWRITE_RELATION",
		"DIRECT_PRODUCT", "CONCAT", "DOMAIN_RESTRICTION", "DOMAIN_SUBTRACTION",
		"RANGE_RESTRICTION", "RANGE_SUBTRACTION", "INSERT_FRONT", "INSERT_TAIL",
		"INTERSECTION", "RESTRICT_FRONT", "RESTRICT_TAIL", "MAPLET", "UNION",
		"UNDERSCORE", "MULT", "DIVIDE", "MOD", "POWER_OF", "INTERVAL", "EQUAL",
		"DOUBLE_EQUAL", "NOT_EQUAL", "COLON", "ELEMENT_OF", "INCLUSION", "STRICT_INCLUSION",
		"NON_INCLUSION", "STRICT_NON_INCLUSION", "NOT_BELONGING", "LESS", "LESS_EQUAL",
		"GREATER", "GREATER_EQUAL", "TRUE", "FALSE", "SET_RELATION", "PARTIAL_FUNCTION",
		"TOTAL_FUNCTION", "TOTAL_INJECTION", "PARTIAL_INJECTION", "TOTAL_SURJECTION",
		"PARTIAL_SURJECTION", "TOTAL_BIJECTION", "PARTIAL_BIJECTION", "TOTAL_RELATION",
		"SURJECTION_RELATION", "TOTAL_SURJECTION_RELATION", "DOM", "RAN", "CARD",
		"CONC", "FIRST", "FRONT", "ID", "ISEQ", "ISEQ1", "LAST", "MAX", "MIN",
		"POW", "REV", "SEQ", "SEQ1", "TAIL", "GENERALIZED_UNION", "GENERALIZED_INTER",
		"NATURAL", "NATURAL1", "INTEGER", "INT", "NAT", "NAT1", "BOOL", "MININT",
		"MAXINT", "SIGMA", "PI", "QUANTIFIED_UNION", "QUANTIFIED_INTER", "StringLiteral",
		"IDENTIFIER", "COMMENT", "LINE_COMMENT", "WS", "B_END", "ErrorCharacter",
		"LTL_TRUE", "LTL_FALSE", "LTL_IMPLIES", "LTL_AND", "LTL_OR", "LTL_NOT",
		"LTL_LEFT_PAR", "LTL_RIGHT_PAR", "LTL_GLOBALLY", "LTL_FINALLY", "LTL_UNTIL",
		"LTL_WEAK_UNTIL", "LTL_RELEASE", "LTL_NEXT", "LTL_B_START", "LTL_WS",
		"LTL_ErrorCharacter"
	};
		public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

		[NotNull]
		public override IVocabulary Vocabulary
		{
			get
			{
				return DefaultVocabulary;
			}
		}

		public override string GrammarFileName { get { return "NBMothParser.g4"; } }

		public override string[] RuleNames { get { return ruleNames; } }

		public override string SerializedAtn { get { return new string(_serializedATN); } }

		static NBMothParser()
		{
			decisionToDFA = new DFA[_ATN.NumberOfDecisions];
			for (int i = 0; i < _ATN.NumberOfDecisions; i++)
			{
				decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
			}
		}

		public NBMothParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NBMothParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
		{
			Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
		}

		public partial class StartContext : ParserRuleContext
		{
			public StartContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_start; } }

			public StartContext() { }
			public virtual void CopyFrom(StartContext context)
			{
				base.CopyFrom(context);
			}
		}
		public partial class ParseUnitContext : StartContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public Parse_unitContext parse_unit()
			{
				return GetRuleContext<Parse_unitContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(NBMothParser.Eof, 0); }
			public ParseUnitContext(StartContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterParseUnit(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitParseUnit(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitParseUnit(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public StartContext start()
		{
			StartContext _localctx = new StartContext(Context, State);
			EnterRule(_localctx, 0, RULE_start);
			try
			{
				_localctx = new ParseUnitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
					State = 34;
					parse_unit();
					State = 35;
					Match(Eof);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class Parse_unitContext : ParserRuleContext
		{
			public Parse_unitContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_parse_unit; } }

			public Parse_unitContext() { }
			public virtual void CopyFrom(Parse_unitContext context)
			{
				base.CopyFrom(context);
			}
		}
		public partial class MachineParseUnitContext : Parse_unitContext
		{
			public Machine_clauseContext _machine_clause;
			public IList<Machine_clauseContext> _clauses = new List<Machine_clauseContext>();
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACHINE() { return GetToken(NBMothParser.MACHINE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NBMothParser.IDENTIFIER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(NBMothParser.END, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Machine_clauseContext[] machine_clause()
			{
				return GetRuleContexts<Machine_clauseContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public Machine_clauseContext machine_clause(int i)
			{
				return GetRuleContext<Machine_clauseContext>(i);
			}
			public MachineParseUnitContext(Parse_unitContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterMachineParseUnit(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitMachineParseUnit(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitMachineParseUnit(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public Parse_unitContext parse_unit()
		{
			Parse_unitContext _localctx = new Parse_unitContext(Context, State);
			EnterRule(_localctx, 2, RULE_parse_unit);
			int _la;
			try
			{
				_localctx = new MachineParseUnitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
					State = 37;
					Match(MACHINE);
					State = 38;
					Match(IDENTIFIER);
					State = 42;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONSTANTS) | (1L << PROPERTIES) | (1L << VARIABLES) | (1L << INVARIANT) | (1L << OPERATIONS) | (1L << INITIALISATION) | (1L << SETS) | (1L << DEFINITIONS))) != 0))
					{
						{
							{
								State = 39;
								((MachineParseUnitContext)_localctx)._machine_clause = machine_clause();
								((MachineParseUnitContext)_localctx)._clauses.Add(((MachineParseUnitContext)_localctx)._machine_clause);
							}
						}
						State = 44;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 45;
					Match(END);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class Machine_clauseContext : ParserRuleContext
		{
			public Machine_clauseContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_machine_clause; } }

			public Machine_clauseContext() { }
			public virtual void CopyFrom(Machine_clauseContext context)
			{
				base.CopyFrom(context);
			}
		}
		public partial class DefinitionClauseIndirectionContext : Machine_clauseContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public Definition_clauseContext definition_clause()
			{
				return GetRuleContext<Definition_clauseContext>(0);
			}
			public DefinitionClauseIndirectionContext(Machine_clauseContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterDefinitionClauseIndirection(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitDefinitionClauseIndirection(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitDefinitionClauseIndirection(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class OperationsClauseContext : Machine_clauseContext
		{
			public Single_operationContext _single_operation;
			public IList<Single_operationContext> _ops = new List<Single_operationContext>();
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATIONS() { return GetToken(NBMothParser.OPERATIONS, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Single_operationContext[] single_operation()
			{
				return GetRuleContexts<Single_operationContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public Single_operationContext single_operation(int i)
			{
				return GetRuleContext<Single_operationContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(NBMothParser.SEMICOLON); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SEMICOLON(int i)
			{
				return GetToken(NBMothParser.SEMICOLON, i);
			}
			public OperationsClauseContext(Machine_clauseContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterOperationsClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitOperationsClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitOperationsClause(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class InitialisationClauseContext : Machine_clauseContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALISATION() { return GetToken(NBMothParser.INITIALISATION, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext substitution()
			{
				return GetRuleContext<SubstitutionContext>(0);
			}
			public InitialisationClauseContext(Machine_clauseContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterInitialisationClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitInitialisationClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitInitialisationClause(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class DeclarationClauseContext : Machine_clauseContext
		{
			public IToken clauseName;
			[System.Diagnostics.DebuggerNonUserCode]
			public Identifier_listContext identifier_list()
			{
				return GetRuleContext<Identifier_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANTS() { return GetToken(NBMothParser.CONSTANTS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(NBMothParser.VARIABLES, 0); }
			public DeclarationClauseContext(Machine_clauseContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterDeclarationClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitDeclarationClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitDeclarationClause(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class SetsClauseContext : Machine_clauseContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(NBMothParser.SETS, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Set_definitionContext[] set_definition()
			{
				return GetRuleContexts<Set_definitionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public Set_definitionContext set_definition(int i)
			{
				return GetRuleContext<Set_definitionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(NBMothParser.SEMICOLON); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SEMICOLON(int i)
			{
				return GetToken(NBMothParser.SEMICOLON, i);
			}
			public SetsClauseContext(Machine_clauseContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterSetsClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitSetsClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitSetsClause(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class PredicateClauseContext : Machine_clauseContext
		{
			public IToken clauseName;
			public PredicateContext pred;
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate()
			{
				return GetRuleContext<PredicateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTIES() { return GetToken(NBMothParser.PROPERTIES, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVARIANT() { return GetToken(NBMothParser.INVARIANT, 0); }
			public PredicateClauseContext(Machine_clauseContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterPredicateClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitPredicateClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitPredicateClause(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public Machine_clauseContext machine_clause()
		{
			Machine_clauseContext _localctx = new Machine_clauseContext(Context, State);
			EnterRule(_localctx, 4, RULE_machine_clause);
			int _la;
			try
			{
				State = 72;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case PROPERTIES:
					case INVARIANT:
						_localctx = new PredicateClauseContext(_localctx);
						EnterOuterAlt(_localctx, 1);
						{
							State = 47;
							((PredicateClauseContext)_localctx).clauseName = TokenStream.LT(1);
							_la = TokenStream.LA(1);
							if (!(_la == PROPERTIES || _la == INVARIANT))
							{
								((PredicateClauseContext)_localctx).clauseName = ErrorHandler.RecoverInline(this);
							}
							else
							{
								ErrorHandler.ReportMatch(this);
								Consume();
							}
							State = 48;
							((PredicateClauseContext)_localctx).pred = predicate(0);
						}
						break;
					case CONSTANTS:
					case VARIABLES:
						_localctx = new DeclarationClauseContext(_localctx);
						EnterOuterAlt(_localctx, 2);
						{
							State = 49;
							((DeclarationClauseContext)_localctx).clauseName = TokenStream.LT(1);
							_la = TokenStream.LA(1);
							if (!(_la == CONSTANTS || _la == VARIABLES))
							{
								((DeclarationClauseContext)_localctx).clauseName = ErrorHandler.RecoverInline(this);
							}
							else
							{
								ErrorHandler.ReportMatch(this);
								Consume();
							}
							State = 50;
							identifier_list();
						}
						break;
					case INITIALISATION:
						_localctx = new InitialisationClauseContext(_localctx);
						EnterOuterAlt(_localctx, 3);
						{
							State = 51;
							Match(INITIALISATION);
							State = 52;
							substitution(0);
						}
						break;
					case OPERATIONS:
						_localctx = new OperationsClauseContext(_localctx);
						EnterOuterAlt(_localctx, 4);
						{
							State = 53;
							Match(OPERATIONS);
							State = 54;
							((OperationsClauseContext)_localctx)._single_operation = single_operation();
							((OperationsClauseContext)_localctx)._ops.Add(((OperationsClauseContext)_localctx)._single_operation);
							State = 59;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la == SEMICOLON)
							{
								{
									{
										State = 55;
										Match(SEMICOLON);
										State = 56;
										((OperationsClauseContext)_localctx)._single_operation = single_operation();
										((OperationsClauseContext)_localctx)._ops.Add(((OperationsClauseContext)_localctx)._single_operation);
									}
								}
								State = 61;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
						}
						break;
					case SETS:
						_localctx = new SetsClauseContext(_localctx);
						EnterOuterAlt(_localctx, 5);
						{
							State = 62;
							Match(SETS);
							State = 63;
							set_definition();
							State = 68;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la == SEMICOLON)
							{
								{
									{
										State = 64;
										Match(SEMICOLON);
										State = 65;
										set_definition();
									}
								}
								State = 70;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
						}
						break;
					case DEFINITIONS:
						_localctx = new DefinitionClauseIndirectionContext(_localctx);
						EnterOuterAlt(_localctx, 6);
						{
							State = 71;
							definition_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class Set_definitionContext : ParserRuleContext
		{
			public Set_definitionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_set_definition; } }

			public Set_definitionContext() { }
			public virtual void CopyFrom(Set_definitionContext context)
			{
				base.CopyFrom(context);
			}
		}
		public partial class EnumeratedSetContext : Set_definitionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NBMothParser.IDENTIFIER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(NBMothParser.EQUAL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(NBMothParser.LEFT_BRACE, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Identifier_listContext identifier_list()
			{
				return GetRuleContext<Identifier_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(NBMothParser.RIGHT_BRACE, 0); }
			public EnumeratedSetContext(Set_definitionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterEnumeratedSet(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitEnumeratedSet(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitEnumeratedSet(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class DeferredSetContext : Set_definitionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NBMothParser.IDENTIFIER, 0); }
			public DeferredSetContext(Set_definitionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterDeferredSet(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitDeferredSet(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitDeferredSet(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public Set_definitionContext set_definition()
		{
			Set_definitionContext _localctx = new Set_definitionContext(Context, State);
			EnterRule(_localctx, 6, RULE_set_definition);
			try
			{
				State = 81;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 4, Context))
				{
					case 1:
						_localctx = new DeferredSetContext(_localctx);
						EnterOuterAlt(_localctx, 1);
						{
							State = 74;
							Match(IDENTIFIER);
						}
						break;
					case 2:
						_localctx = new EnumeratedSetContext(_localctx);
						EnterOuterAlt(_localctx, 2);
						{
							State = 75;
							Match(IDENTIFIER);
							State = 76;
							Match(EQUAL);
							State = 77;
							Match(LEFT_BRACE);
							State = 78;
							identifier_list();
							State = 79;
							Match(RIGHT_BRACE);
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class Definition_clauseContext : ParserRuleContext
		{
			public Definition_clauseContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_definition_clause; } }

			public Definition_clauseContext() { }
			public virtual void CopyFrom(Definition_clauseContext context)
			{
				base.CopyFrom(context);
			}
		}
		public partial class DefinitionClauseContext : Definition_clauseContext
		{
			public Single_definitionContext _single_definition;
			public IList<Single_definitionContext> _defs = new List<Single_definitionContext>();
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINITIONS() { return GetToken(NBMothParser.DEFINITIONS, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Single_definitionContext[] single_definition()
			{
				return GetRuleContexts<Single_definitionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public Single_definitionContext single_definition(int i)
			{
				return GetRuleContext<Single_definitionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(NBMothParser.SEMICOLON); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SEMICOLON(int i)
			{
				return GetToken(NBMothParser.SEMICOLON, i);
			}
			public DefinitionClauseContext(Definition_clauseContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterDefinitionClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitDefinitionClause(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitDefinitionClause(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public Definition_clauseContext definition_clause()
		{
			Definition_clauseContext _localctx = new Definition_clauseContext(Context, State);
			EnterRule(_localctx, 8, RULE_definition_clause);
			int _la;
			try
			{
				int _alt;
				_localctx = new DefinitionClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
					State = 83;
					Match(DEFINITIONS);
					State = 84;
					((DefinitionClauseContext)_localctx)._single_definition = single_definition();
					((DefinitionClauseContext)_localctx)._defs.Add(((DefinitionClauseContext)_localctx)._single_definition);
					State = 89;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 5, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 85;
									Match(SEMICOLON);
									State = 86;
									((DefinitionClauseContext)_localctx)._single_definition = single_definition();
									((DefinitionClauseContext)_localctx)._defs.Add(((DefinitionClauseContext)_localctx)._single_definition);
								}
							}
						}
						State = 91;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 5, Context);
					}
					State = 93;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == SEMICOLON)
					{
						{
							State = 92;
							Match(SEMICOLON);
						}
					}

				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class Single_definitionContext : ParserRuleContext
		{
			public Single_definitionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_single_definition; } }

			public Single_definitionContext() { }
			public virtual void CopyFrom(Single_definitionContext context)
			{
				base.CopyFrom(context);
			}
		}
		public partial class OrdinaryDefinitionContext : Single_definitionContext
		{
			public IToken name;
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_EQUAL() { return GetToken(NBMothParser.DOUBLE_EQUAL, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Definition_bodyContext definition_body()
			{
				return GetRuleContext<Definition_bodyContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NBMothParser.IDENTIFIER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Identifier_listContext identifier_list()
			{
				return GetRuleContext<Identifier_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			public OrdinaryDefinitionContext(Single_definitionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterOrdinaryDefinition(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitOrdinaryDefinition(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitOrdinaryDefinition(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class DefinitionFileContext : Single_definitionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(NBMothParser.StringLiteral, 0); }
			public DefinitionFileContext(Single_definitionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterDefinitionFile(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitDefinitionFile(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitDefinitionFile(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public Single_definitionContext single_definition()
		{
			Single_definitionContext _localctx = new Single_definitionContext(Context, State);
			EnterRule(_localctx, 10, RULE_single_definition);
			int _la;
			try
			{
				State = 105;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case IDENTIFIER:
						_localctx = new OrdinaryDefinitionContext(_localctx);
						EnterOuterAlt(_localctx, 1);
						{
							State = 95;
							((OrdinaryDefinitionContext)_localctx).name = Match(IDENTIFIER);
							State = 100;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == LEFT_PAR)
							{
								{
									State = 96;
									Match(LEFT_PAR);
									State = 97;
									identifier_list();
									State = 98;
									Match(RIGHT_PAR);
								}
							}

							State = 102;
							Match(DOUBLE_EQUAL);
							State = 103;
							definition_body();
						}
						break;
					case StringLiteral:
						_localctx = new DefinitionFileContext(_localctx);
						EnterOuterAlt(_localctx, 2);
						{
							State = 104;
							Match(StringLiteral);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class Definition_bodyContext : ParserRuleContext
		{
			public Definition_bodyContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_definition_body; } }

			public Definition_bodyContext() { }
			public virtual void CopyFrom(Definition_bodyContext context)
			{
				base.CopyFrom(context);
			}
		}
		public partial class DefinitionAmbiguousCallContext : Definition_bodyContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NBMothParser.IDENTIFIER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Expression_listContext expression_list()
			{
				return GetRuleContext<Expression_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			public DefinitionAmbiguousCallContext(Definition_bodyContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterDefinitionAmbiguousCall(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitDefinitionAmbiguousCall(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitDefinitionAmbiguousCall(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class DefinitionExpressionContext : Definition_bodyContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			public DefinitionExpressionContext(Definition_bodyContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterDefinitionExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitDefinitionExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitDefinitionExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class DefinitionPredicateContext : Definition_bodyContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate()
			{
				return GetRuleContext<PredicateContext>(0);
			}
			public DefinitionPredicateContext(Definition_bodyContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterDefinitionPredicate(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitDefinitionPredicate(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitDefinitionPredicate(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class DefinitionSubstitutionContext : Definition_bodyContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext substitution()
			{
				return GetRuleContext<SubstitutionContext>(0);
			}
			public DefinitionSubstitutionContext(Definition_bodyContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterDefinitionSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitDefinitionSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitDefinitionSubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public Definition_bodyContext definition_body()
		{
			Definition_bodyContext _localctx = new Definition_bodyContext(Context, State);
			EnterRule(_localctx, 12, RULE_definition_body);
			int _la;
			try
			{
				State = 117;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 10, Context))
				{
					case 1:
						_localctx = new DefinitionAmbiguousCallContext(_localctx);
						EnterOuterAlt(_localctx, 1);
						{
							State = 107;
							Match(IDENTIFIER);
							State = 112;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == LEFT_PAR)
							{
								{
									State = 108;
									Match(LEFT_PAR);
									State = 109;
									expression_list();
									State = 110;
									Match(RIGHT_PAR);
								}
							}

						}
						break;
					case 2:
						_localctx = new DefinitionExpressionContext(_localctx);
						EnterOuterAlt(_localctx, 2);
						{
							State = 114;
							expression(0);
						}
						break;
					case 3:
						_localctx = new DefinitionPredicateContext(_localctx);
						EnterOuterAlt(_localctx, 3);
						{
							State = 115;
							predicate(0);
						}
						break;
					case 4:
						_localctx = new DefinitionSubstitutionContext(_localctx);
						EnterOuterAlt(_localctx, 4);
						{
							State = 116;
							substitution(0);
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class Single_operationContext : ParserRuleContext
		{
			public Single_operationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_single_operation; } }

			public Single_operationContext() { }
			public virtual void CopyFrom(Single_operationContext context)
			{
				base.CopyFrom(context);
			}
		}
		public partial class OperationContext : Single_operationContext
		{
			public Identifier_listContext outputParams;
			public Identifier_listContext @params;
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NBMothParser.IDENTIFIER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(NBMothParser.EQUAL, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext substitution()
			{
				return GetRuleContext<SubstitutionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT_PARAMS() { return GetToken(NBMothParser.OUTPUT_PARAMS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Identifier_listContext[] identifier_list()
			{
				return GetRuleContexts<Identifier_listContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public Identifier_listContext identifier_list(int i)
			{
				return GetRuleContext<Identifier_listContext>(i);
			}
			public OperationContext(Single_operationContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterOperation(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitOperation(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitOperation(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public Single_operationContext single_operation()
		{
			Single_operationContext _localctx = new Single_operationContext(Context, State);
			EnterRule(_localctx, 14, RULE_single_operation);
			int _la;
			try
			{
				_localctx = new OperationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
					State = 122;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 11, Context))
					{
						case 1:
							{
								State = 119;
								((OperationContext)_localctx).outputParams = identifier_list();
								State = 120;
								Match(OUTPUT_PARAMS);
							}
							break;
					}
					State = 124;
					Match(IDENTIFIER);
					State = 129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == LEFT_PAR)
					{
						{
							State = 125;
							Match(LEFT_PAR);
							State = 126;
							((OperationContext)_localctx).@params = identifier_list();
							State = 127;
							Match(RIGHT_PAR);
						}
					}

					State = 131;
					Match(EQUAL);
					State = 132;
					substitution(0);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class Quantified_variables_listContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public Identifier_listContext identifier_list()
			{
				return GetRuleContext<Identifier_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			public Quantified_variables_listContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_quantified_variables_list; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterQuantified_variables_list(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitQuantified_variables_list(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitQuantified_variables_list(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public Quantified_variables_listContext quantified_variables_list()
		{
			Quantified_variables_listContext _localctx = new Quantified_variables_listContext(Context, State);
			EnterRule(_localctx, 16, RULE_quantified_variables_list);
			try
			{
				State = 139;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case IDENTIFIER:
						EnterOuterAlt(_localctx, 1);
						{
							State = 134;
							identifier_list();
						}
						break;
					case LEFT_PAR:
						EnterOuterAlt(_localctx, 2);
						{
							State = 135;
							Match(LEFT_PAR);
							State = 136;
							identifier_list();
							State = 137;
							Match(RIGHT_PAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class Identifier_listContext : ParserRuleContext
		{
			public IToken _IDENTIFIER;
			public IList<IToken> _identifiers = new List<IToken>();
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NBMothParser.IDENTIFIER); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode IDENTIFIER(int i)
			{
				return GetToken(NBMothParser.IDENTIFIER, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NBMothParser.COMMA); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode COMMA(int i)
			{
				return GetToken(NBMothParser.COMMA, i);
			}
			public Identifier_listContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_identifier_list; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterIdentifier_list(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitIdentifier_list(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitIdentifier_list(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public Identifier_listContext identifier_list()
		{
			Identifier_listContext _localctx = new Identifier_listContext(Context, State);
			EnterRule(_localctx, 18, RULE_identifier_list);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 141;
					_localctx._IDENTIFIER = Match(IDENTIFIER);
					_localctx._identifiers.Add(_localctx._IDENTIFIER);
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == COMMA)
					{
						{
							{
								State = 142;
								Match(COMMA);
								State = 143;
								_localctx._IDENTIFIER = Match(IDENTIFIER);
								_localctx._identifiers.Add(_localctx._IDENTIFIER);
							}
						}
						State = 148;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class SubstitutionContext : ParserRuleContext
		{
			public SubstitutionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_substitution; } }

			public SubstitutionContext() { }
			public virtual void CopyFrom(SubstitutionContext context)
			{
				base.CopyFrom(context);
			}
		}
		public partial class SelectSubstitutionContext : SubstitutionContext
		{
			public PredicateContext _predicate;
			public IList<PredicateContext> _preds = new List<PredicateContext>();
			public SubstitutionContext _substitution;
			public IList<SubstitutionContext> _subs = new List<SubstitutionContext>();
			public SubstitutionContext elseSub;
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(NBMothParser.SELECT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(NBMothParser.THEN); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode THEN(int i)
			{
				return GetToken(NBMothParser.THEN, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(NBMothParser.END, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext[] predicate()
			{
				return GetRuleContexts<PredicateContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate(int i)
			{
				return GetRuleContext<PredicateContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext[] substitution()
			{
				return GetRuleContexts<SubstitutionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext substitution(int i)
			{
				return GetRuleContext<SubstitutionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(NBMothParser.WHEN); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode WHEN(int i)
			{
				return GetToken(NBMothParser.WHEN, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(NBMothParser.ELSE, 0); }
			public SelectSubstitutionContext(SubstitutionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterSelectSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitSelectSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitSelectSubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class CaseSubstitutionContext : SubstitutionContext
		{
			public ExpressionContext expr;
			public Expression_listContext either;
			public SubstitutionContext sub;
			public Expression_listContext _expression_list;
			public IList<Expression_listContext> _or_exprs = new List<Expression_listContext>();
			public SubstitutionContext _substitution;
			public IList<SubstitutionContext> _or_subs = new List<SubstitutionContext>();
			public SubstitutionContext else_sub;
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(NBMothParser.CASE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(NBMothParser.OF, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EITHER() { return GetToken(NBMothParser.EITHER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(NBMothParser.THEN); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode THEN(int i)
			{
				return GetToken(NBMothParser.THEN, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] END() { return GetTokens(NBMothParser.END); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode END(int i)
			{
				return GetToken(NBMothParser.END, i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public Expression_listContext[] expression_list()
			{
				return GetRuleContexts<Expression_listContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public Expression_listContext expression_list(int i)
			{
				return GetRuleContext<Expression_listContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext[] substitution()
			{
				return GetRuleContexts<SubstitutionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext substitution(int i)
			{
				return GetRuleContext<SubstitutionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SUBSTITUTION_OR() { return GetTokens(NBMothParser.SUBSTITUTION_OR); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode SUBSTITUTION_OR(int i)
			{
				return GetToken(NBMothParser.SUBSTITUTION_OR, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(NBMothParser.ELSE, 0); }
			public CaseSubstitutionContext(SubstitutionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterCaseSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitCaseSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitCaseSubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class ConditionSubstitutionContext : SubstitutionContext
		{
			public IToken keyword;
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate()
			{
				return GetRuleContext<PredicateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(NBMothParser.THEN, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext substitution()
			{
				return GetRuleContext<SubstitutionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(NBMothParser.END, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE() { return GetToken(NBMothParser.PRE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(NBMothParser.ASSERT, 0); }
			public ConditionSubstitutionContext(SubstitutionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterConditionSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitConditionSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitConditionSubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class BlockSubstitutionContext : SubstitutionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(NBMothParser.BEGIN, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext substitution()
			{
				return GetRuleContext<SubstitutionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(NBMothParser.END, 0); }
			public BlockSubstitutionContext(SubstitutionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterBlockSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitBlockSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitBlockSubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class AnySubstitutionContext : SubstitutionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(NBMothParser.ANY, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Identifier_listContext identifier_list()
			{
				return GetRuleContext<Identifier_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(NBMothParser.WHERE, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate()
			{
				return GetRuleContext<PredicateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(NBMothParser.THEN, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext substitution()
			{
				return GetRuleContext<SubstitutionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(NBMothParser.END, 0); }
			public AnySubstitutionContext(SubstitutionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterAnySubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitAnySubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitAnySubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class ParallelSubstitutionContext : SubstitutionContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext[] substitution()
			{
				return GetRuleContexts<SubstitutionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext substitution(int i)
			{
				return GetRuleContext<SubstitutionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_VERTICAL_BAR() { return GetToken(NBMothParser.DOUBLE_VERTICAL_BAR, 0); }
			public ParallelSubstitutionContext(SubstitutionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterParallelSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitParallelSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitParallelSubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class IfSubstitutionContext : SubstitutionContext
		{
			public PredicateContext _predicate;
			public IList<PredicateContext> _preds = new List<PredicateContext>();
			public SubstitutionContext _substitution;
			public IList<SubstitutionContext> _subs = new List<SubstitutionContext>();
			public SubstitutionContext elseSub;
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(NBMothParser.IF, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(NBMothParser.THEN); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode THEN(int i)
			{
				return GetToken(NBMothParser.THEN, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(NBMothParser.END, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext[] predicate()
			{
				return GetRuleContexts<PredicateContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate(int i)
			{
				return GetRuleContext<PredicateContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext[] substitution()
			{
				return GetRuleContexts<SubstitutionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext substitution(int i)
			{
				return GetRuleContext<SubstitutionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSIF() { return GetTokens(NBMothParser.ELSIF); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode ELSIF(int i)
			{
				return GetToken(NBMothParser.ELSIF, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(NBMothParser.ELSE, 0); }
			public IfSubstitutionContext(SubstitutionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterIfSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitIfSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitIfSubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class SkipSubstitutionContext : SubstitutionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_SUB() { return GetToken(NBMothParser.SKIP_SUB, 0); }
			public SkipSubstitutionContext(SubstitutionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterSkipSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitSkipSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitSkipSubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class BecomesElementOfSubstitutionContext : SubstitutionContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public Identifier_listContext identifier_list()
			{
				return GetRuleContext<Identifier_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(NBMothParser.DOUBLE_COLON, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			public BecomesElementOfSubstitutionContext(SubstitutionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterBecomesElementOfSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitBecomesElementOfSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitBecomesElementOfSubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class WhileSubstitutionContext : SubstitutionContext
		{
			public PredicateContext condition;
			public PredicateContext invariant;
			public ExpressionContext variant;
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(NBMothParser.WHILE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(NBMothParser.DO, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public SubstitutionContext substitution()
			{
				return GetRuleContext<SubstitutionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVARIANT() { return GetToken(NBMothParser.INVARIANT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT() { return GetToken(NBMothParser.VARIANT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(NBMothParser.END, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext[] predicate()
			{
				return GetRuleContexts<PredicateContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate(int i)
			{
				return GetRuleContext<PredicateContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			public WhileSubstitutionContext(SubstitutionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterWhileSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitWhileSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitWhileSubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class AssignSubstitutionContext : SubstitutionContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public Identifier_listContext identifier_list()
			{
				return GetRuleContext<Identifier_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(NBMothParser.ASSIGN, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Expression_listContext expression_list()
			{
				return GetRuleContext<Expression_listContext>(0);
			}
			public AssignSubstitutionContext(SubstitutionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterAssignSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitAssignSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitAssignSubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class BecomesSuchThatSubstitutionContext : SubstitutionContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public Identifier_listContext identifier_list()
			{
				return GetRuleContext<Identifier_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate()
			{
				return GetRuleContext<PredicateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT_OF() { return GetToken(NBMothParser.ELEMENT_OF, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NBMothParser.COLON, 0); }
			public BecomesSuchThatSubstitutionContext(SubstitutionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterBecomesSuchThatSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitBecomesSuchThatSubstitution(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitBecomesSuchThatSubstitution(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public SubstitutionContext substitution()
		{
			return substitution(0);
		}

		private SubstitutionContext substitution(int _p)
		{
			ParserRuleContext _parentctx = Context;
			int _parentState = State;
			SubstitutionContext _localctx = new SubstitutionContext(Context, _parentState);
			SubstitutionContext _prevctx = _localctx;
			int _startState = 20;
			EnterRecursionRule(_localctx, 20, RULE_substitution, _p);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 256;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 21, Context))
					{
						case 1:
							{
								_localctx = new BlockSubstitutionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;

								State = 150;
								Match(BEGIN);
								State = 151;
								substitution(0);
								State = 152;
								Match(END);
							}
							break;
						case 2:
							{
								_localctx = new SkipSubstitutionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 154;
								Match(SKIP_SUB);
							}
							break;
						case 3:
							{
								_localctx = new SelectSubstitutionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 155;
								Match(SELECT);
								State = 156;
								((SelectSubstitutionContext)_localctx)._predicate = predicate(0);
								((SelectSubstitutionContext)_localctx)._preds.Add(((SelectSubstitutionContext)_localctx)._predicate);
								State = 157;
								Match(THEN);
								State = 158;
								((SelectSubstitutionContext)_localctx)._substitution = substitution(0);
								((SelectSubstitutionContext)_localctx)._subs.Add(((SelectSubstitutionContext)_localctx)._substitution);
								State = 166;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (_la == WHEN)
								{
									{
										{
											State = 159;
											Match(WHEN);
											State = 160;
											((SelectSubstitutionContext)_localctx)._predicate = predicate(0);
											((SelectSubstitutionContext)_localctx)._preds.Add(((SelectSubstitutionContext)_localctx)._predicate);
											State = 161;
											Match(THEN);
											State = 162;
											((SelectSubstitutionContext)_localctx)._substitution = substitution(0);
											((SelectSubstitutionContext)_localctx)._subs.Add(((SelectSubstitutionContext)_localctx)._substitution);
										}
									}
									State = 168;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								State = 171;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == ELSE)
								{
									{
										State = 169;
										Match(ELSE);
										State = 170;
										((SelectSubstitutionContext)_localctx).elseSub = substitution(0);
									}
								}

								State = 173;
								Match(END);
							}
							break;
						case 4:
							{
								_localctx = new CaseSubstitutionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 175;
								Match(CASE);
								State = 176;
								((CaseSubstitutionContext)_localctx).expr = expression(0);
								State = 177;
								Match(OF);
								State = 178;
								Match(EITHER);
								State = 179;
								((CaseSubstitutionContext)_localctx).either = expression_list();
								State = 180;
								Match(THEN);
								State = 181;
								((CaseSubstitutionContext)_localctx).sub = substitution(0);
								State = 187;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								do
								{
									{
										{
											State = 182;
											Match(SUBSTITUTION_OR);
											State = 183;
											((CaseSubstitutionContext)_localctx)._expression_list = expression_list();
											((CaseSubstitutionContext)_localctx)._or_exprs.Add(((CaseSubstitutionContext)_localctx)._expression_list);
											State = 184;
											Match(THEN);
											State = 185;
											((CaseSubstitutionContext)_localctx)._substitution = substitution(0);
											((CaseSubstitutionContext)_localctx)._or_subs.Add(((CaseSubstitutionContext)_localctx)._substitution);
										}
									}
									State = 189;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								} while (_la == SUBSTITUTION_OR);
								State = 193;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == ELSE)
								{
									{
										State = 191;
										Match(ELSE);
										State = 192;
										((CaseSubstitutionContext)_localctx).else_sub = substitution(0);
									}
								}

								State = 195;
								Match(END);
								State = 196;
								Match(END);
							}
							break;
						case 5:
							{
								_localctx = new ConditionSubstitutionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 198;
								((ConditionSubstitutionContext)_localctx).keyword = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if (!(_la == PRE || _la == ASSERT))
								{
									((ConditionSubstitutionContext)_localctx).keyword = ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
								State = 199;
								predicate(0);
								State = 200;
								Match(THEN);
								State = 201;
								substitution(0);
								State = 202;
								Match(END);
							}
							break;
						case 6:
							{
								_localctx = new AnySubstitutionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 204;
								Match(ANY);
								State = 205;
								identifier_list();
								State = 206;
								Match(WHERE);
								State = 207;
								predicate(0);
								State = 208;
								Match(THEN);
								State = 209;
								substitution(0);
								State = 210;
								Match(END);
							}
							break;
						case 7:
							{
								_localctx = new AssignSubstitutionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 212;
								identifier_list();
								State = 213;
								Match(ASSIGN);
								State = 214;
								expression_list();
							}
							break;
						case 8:
							{
								_localctx = new BecomesElementOfSubstitutionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 216;
								identifier_list();
								State = 217;
								Match(DOUBLE_COLON);
								State = 218;
								expression(0);
							}
							break;
						case 9:
							{
								_localctx = new BecomesSuchThatSubstitutionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 220;
								identifier_list();
								State = 221;
								_la = TokenStream.LA(1);
								if (!(_la == COLON || _la == ELEMENT_OF))
								{
									ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
								State = 222;
								Match(LEFT_PAR);
								State = 223;
								predicate(0);
								State = 224;
								Match(RIGHT_PAR);
							}
							break;
						case 10:
							{
								_localctx = new IfSubstitutionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 226;
								Match(IF);
								State = 227;
								((IfSubstitutionContext)_localctx)._predicate = predicate(0);
								((IfSubstitutionContext)_localctx)._preds.Add(((IfSubstitutionContext)_localctx)._predicate);
								State = 228;
								Match(THEN);
								State = 229;
								((IfSubstitutionContext)_localctx)._substitution = substitution(0);
								((IfSubstitutionContext)_localctx)._subs.Add(((IfSubstitutionContext)_localctx)._substitution);
								State = 237;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (_la == ELSIF)
								{
									{
										{
											State = 230;
											Match(ELSIF);
											State = 231;
											((IfSubstitutionContext)_localctx)._predicate = predicate(0);
											((IfSubstitutionContext)_localctx)._preds.Add(((IfSubstitutionContext)_localctx)._predicate);
											State = 232;
											Match(THEN);
											State = 233;
											((IfSubstitutionContext)_localctx)._substitution = substitution(0);
											((IfSubstitutionContext)_localctx)._subs.Add(((IfSubstitutionContext)_localctx)._substitution);
										}
									}
									State = 239;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								State = 242;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == ELSE)
								{
									{
										State = 240;
										Match(ELSE);
										State = 241;
										((IfSubstitutionContext)_localctx).elseSub = substitution(0);
									}
								}

								State = 244;
								Match(END);
							}
							break;
						case 11:
							{
								_localctx = new WhileSubstitutionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 246;
								Match(WHILE);
								State = 247;
								((WhileSubstitutionContext)_localctx).condition = predicate(0);
								State = 248;
								Match(DO);
								State = 249;
								substitution(0);
								State = 250;
								Match(INVARIANT);
								State = 251;
								((WhileSubstitutionContext)_localctx).invariant = predicate(0);
								State = 252;
								Match(VARIANT);
								State = 253;
								((WhileSubstitutionContext)_localctx).variant = expression(0);
								State = 254;
								Match(END);
							}
							break;
					}
					Context.Stop = TokenStream.LT(-1);
					State = 263;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 22, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							if (ParseListeners != null)
								TriggerExitRuleEvent();
							_prevctx = _localctx;
							{
								{
									_localctx = new ParallelSubstitutionContext(new SubstitutionContext(_parentctx, _parentState));
									PushNewRecursionContext(_localctx, _startState, RULE_substitution);
									State = 258;
									if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
									State = 259;
									Match(DOUBLE_VERTICAL_BAR);
									State = 260;
									substitution(6);
								}
							}
						}
						State = 265;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 22, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				UnrollRecursionContexts(_parentctx);
			}
			return _localctx;
		}

		public partial class Expression_listContext : ParserRuleContext
		{
			public ExpressionContext _expression;
			public IList<ExpressionContext> _exprs = new List<ExpressionContext>();
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext[] expression()
			{
				return GetRuleContexts<ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression(int i)
			{
				return GetRuleContext<ExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NBMothParser.COMMA); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode COMMA(int i)
			{
				return GetToken(NBMothParser.COMMA, i);
			}
			public Expression_listContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_expression_list; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterExpression_list(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitExpression_list(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public Expression_listContext expression_list()
		{
			Expression_listContext _localctx = new Expression_listContext(Context, State);
			EnterRule(_localctx, 22, RULE_expression_list);
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 266;
					_localctx._expression = expression(0);
					_localctx._exprs.Add(_localctx._expression);
					State = 271;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 23, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							{
								{
									State = 267;
									Match(COMMA);
									State = 268;
									_localctx._expression = expression(0);
									_localctx._exprs.Add(_localctx._expression);
								}
							}
						}
						State = 273;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 23, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FormulaContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate()
			{
				return GetRuleContext<PredicateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(NBMothParser.Eof, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			public FormulaContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_formula; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterFormula(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitFormula(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitFormula(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FormulaContext formula()
		{
			FormulaContext _localctx = new FormulaContext(Context, State);
			EnterRule(_localctx, 24, RULE_formula);
			try
			{
				State = 280;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 24, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 274;
							predicate(0);
							State = 275;
							Match(Eof);
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 277;
							expression(0);
							State = 278;
							Match(Eof);
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class PredicateContext : ParserRuleContext
		{
			public PredicateContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_predicate; } }

			public PredicateContext() { }
			public virtual void CopyFrom(PredicateContext context)
			{
				base.CopyFrom(context);
			}
		}
		public partial class PredicateIdentifierContext : PredicateContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NBMothParser.IDENTIFIER, 0); }
			public PredicateIdentifierContext(PredicateContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterPredicateIdentifier(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitPredicateIdentifier(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitPredicateIdentifier(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class PredicateDefinitionCallContext : PredicateContext
		{
			public ExpressionContext _expression;
			public IList<ExpressionContext> _exprs = new List<ExpressionContext>();
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NBMothParser.IDENTIFIER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext[] expression()
			{
				return GetRuleContexts<ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression(int i)
			{
				return GetRuleContext<ExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NBMothParser.COMMA); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode COMMA(int i)
			{
				return GetToken(NBMothParser.COMMA, i);
			}
			public PredicateDefinitionCallContext(PredicateContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterPredicateDefinitionCall(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitPredicateDefinitionCall(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitPredicateDefinitionCall(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class QuantifiedPredicateContext : PredicateContext
		{
			public IToken @operator;
			[System.Diagnostics.DebuggerNonUserCode]
			public Quantified_variables_listContext quantified_variables_list()
			{
				return GetRuleContext<Quantified_variables_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(NBMothParser.DOT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate()
			{
				return GetRuleContext<PredicateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_ANY() { return GetToken(NBMothParser.FOR_ANY, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXITS() { return GetToken(NBMothParser.EXITS, 0); }
			public QuantifiedPredicateContext(PredicateContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterQuantifiedPredicate(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitQuantifiedPredicate(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitQuantifiedPredicate(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class PredicateOperatorContext : PredicateContext
		{
			public IToken @operator;
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(NBMothParser.TRUE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(NBMothParser.FALSE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext[] predicate()
			{
				return GetRuleContexts<PredicateContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate(int i)
			{
				return GetRuleContext<PredicateContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(NBMothParser.NOT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUIVALENCE() { return GetToken(NBMothParser.EQUIVALENCE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(NBMothParser.AND, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(NBMothParser.OR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(NBMothParser.IMPLIES, 0); }
			public PredicateOperatorContext(PredicateContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterPredicateOperator(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitPredicateOperator(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitPredicateOperator(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class PredicateOperatorWithExprArgsContext : PredicateContext
		{
			public IToken @operator;
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext[] expression()
			{
				return GetRuleContexts<ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression(int i)
			{
				return GetRuleContext<ExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(NBMothParser.EQUAL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(NBMothParser.NOT_EQUAL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NBMothParser.COLON, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT_OF() { return GetToken(NBMothParser.ELEMENT_OF, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_BELONGING() { return GetToken(NBMothParser.NOT_BELONGING, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUSION() { return GetToken(NBMothParser.INCLUSION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_INCLUSION() { return GetToken(NBMothParser.STRICT_INCLUSION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_INCLUSION() { return GetToken(NBMothParser.NON_INCLUSION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_NON_INCLUSION() { return GetToken(NBMothParser.STRICT_NON_INCLUSION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(NBMothParser.LESS_EQUAL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(NBMothParser.LESS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(NBMothParser.GREATER_EQUAL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(NBMothParser.GREATER, 0); }
			public PredicateOperatorWithExprArgsContext(PredicateContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterPredicateOperatorWithExprArgs(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitPredicateOperatorWithExprArgs(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitPredicateOperatorWithExprArgs(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class ParenthesesPredicateContext : PredicateContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate()
			{
				return GetRuleContext<PredicateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			public ParenthesesPredicateContext(PredicateContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterParenthesesPredicate(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitParenthesesPredicate(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitParenthesesPredicate(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public PredicateContext predicate()
		{
			return predicate(0);
		}

		private PredicateContext predicate(int _p)
		{
			ParserRuleContext _parentctx = Context;
			int _parentState = State;
			PredicateContext _localctx = new PredicateContext(Context, _parentState);
			PredicateContext _prevctx = _localctx;
			int _startState = 26;
			EnterRecursionRule(_localctx, 26, RULE_predicate, _p);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 317;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 26, Context))
					{
						case 1:
							{
								_localctx = new ParenthesesPredicateContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;

								State = 283;
								Match(LEFT_PAR);
								State = 284;
								predicate(0);
								State = 285;
								Match(RIGHT_PAR);
							}
							break;
						case 2:
							{
								_localctx = new PredicateIdentifierContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 287;
								Match(IDENTIFIER);
							}
							break;
						case 3:
							{
								_localctx = new PredicateDefinitionCallContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 288;
								Match(IDENTIFIER);
								State = 289;
								Match(LEFT_PAR);
								State = 290;
								((PredicateDefinitionCallContext)_localctx)._expression = expression(0);
								((PredicateDefinitionCallContext)_localctx)._exprs.Add(((PredicateDefinitionCallContext)_localctx)._expression);
								State = 295;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (_la == COMMA)
								{
									{
										{
											State = 291;
											Match(COMMA);
											State = 292;
											((PredicateDefinitionCallContext)_localctx)._expression = expression(0);
											((PredicateDefinitionCallContext)_localctx)._exprs.Add(((PredicateDefinitionCallContext)_localctx)._expression);
										}
									}
									State = 297;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								State = 298;
								Match(RIGHT_PAR);
							}
							break;
						case 4:
							{
								_localctx = new QuantifiedPredicateContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 300;
								((QuantifiedPredicateContext)_localctx).@operator = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if (!(_la == FOR_ANY || _la == EXITS))
								{
									((QuantifiedPredicateContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
								State = 301;
								quantified_variables_list();
								State = 302;
								Match(DOT);
								State = 303;
								Match(LEFT_PAR);
								State = 304;
								predicate(0);
								State = 305;
								Match(RIGHT_PAR);
							}
							break;
						case 5:
							{
								_localctx = new PredicateOperatorContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 307;
								((PredicateOperatorContext)_localctx).@operator = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if (!(_la == TRUE || _la == FALSE))
								{
									((PredicateOperatorContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
							}
							break;
						case 6:
							{
								_localctx = new PredicateOperatorContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 308;
								((PredicateOperatorContext)_localctx).@operator = Match(NOT);
								State = 309;
								Match(LEFT_PAR);
								State = 310;
								predicate(0);
								State = 311;
								Match(RIGHT_PAR);
							}
							break;
						case 7:
							{
								_localctx = new PredicateOperatorWithExprArgsContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 313;
								expression(0);
								State = 314;
								((PredicateOperatorWithExprArgsContext)_localctx).@operator = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if (!(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (EQUAL - 86)) | (1L << (NOT_EQUAL - 86)) | (1L << (COLON - 86)) | (1L << (ELEMENT_OF - 86)) | (1L << (INCLUSION - 86)) | (1L << (STRICT_INCLUSION - 86)) | (1L << (NON_INCLUSION - 86)) | (1L << (STRICT_NON_INCLUSION - 86)) | (1L << (NOT_BELONGING - 86)) | (1L << (LESS - 86)) | (1L << (LESS_EQUAL - 86)) | (1L << (GREATER - 86)) | (1L << (GREATER_EQUAL - 86)))) != 0)))
								{
									((PredicateOperatorWithExprArgsContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
								State = 315;
								expression(0);
							}
							break;
					}
					Context.Stop = TokenStream.LT(-1);
					State = 330;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 28, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							if (ParseListeners != null)
								TriggerExitRuleEvent();
							_prevctx = _localctx;
							{
								State = 328;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 27, Context))
								{
									case 1:
										{
											_localctx = new PredicateOperatorContext(new PredicateContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_predicate);
											State = 319;
											if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
											State = 320;
											((PredicateOperatorContext)_localctx).@operator = Match(EQUIVALENCE);
											State = 321;
											predicate(4);
										}
										break;
									case 2:
										{
											_localctx = new PredicateOperatorContext(new PredicateContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_predicate);
											State = 322;
											if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
											State = 323;
											((PredicateOperatorContext)_localctx).@operator = TokenStream.LT(1);
											_la = TokenStream.LA(1);
											if (!(_la == AND || _la == OR))
											{
												((PredicateOperatorContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
											}
											else
											{
												ErrorHandler.ReportMatch(this);
												Consume();
											}
											State = 324;
											predicate(3);
										}
										break;
									case 3:
										{
											_localctx = new PredicateOperatorContext(new PredicateContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_predicate);
											State = 325;
											if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
											State = 326;
											((PredicateOperatorContext)_localctx).@operator = Match(IMPLIES);
											State = 327;
											predicate(2);
										}
										break;
								}
							}
						}
						State = 332;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 28, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				UnrollRecursionContexts(_parentctx);
			}
			return _localctx;
		}

		public partial class ExpressionContext : ParserRuleContext
		{
			public ExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_expression; } }

			public ExpressionContext() { }
			public virtual void CopyFrom(ExpressionContext context)
			{
				base.CopyFrom(context);
			}
		}
		public partial class SetComprehensionExpressionContext : ExpressionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(NBMothParser.LEFT_BRACE, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Identifier_listContext identifier_list()
			{
				return GetRuleContext<Identifier_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERTICAL_BAR() { return GetToken(NBMothParser.VERTICAL_BAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate()
			{
				return GetRuleContext<PredicateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(NBMothParser.RIGHT_BRACE, 0); }
			public SetComprehensionExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterSetComprehensionExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitSetComprehensionExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitSetComprehensionExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class SetEnumerationExpressionContext : ExpressionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(NBMothParser.LEFT_BRACE, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Expression_listContext expression_list()
			{
				return GetRuleContext<Expression_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(NBMothParser.RIGHT_BRACE, 0); }
			public SetEnumerationExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterSetEnumerationExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitSetEnumerationExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitSetEnumerationExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class QuantifiedExpressionContext : ExpressionContext
		{
			public IToken @operator;
			[System.Diagnostics.DebuggerNonUserCode]
			public Quantified_variables_listContext quantified_variables_list()
			{
				return GetRuleContext<Quantified_variables_listContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(NBMothParser.DOT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate()
			{
				return GetRuleContext<PredicateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERTICAL_BAR() { return GetToken(NBMothParser.VERTICAL_BAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUANTIFIED_UNION() { return GetToken(NBMothParser.QUANTIFIED_UNION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUANTIFIED_INTER() { return GetToken(NBMothParser.QUANTIFIED_INTER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGMA() { return GetToken(NBMothParser.SIGMA, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(NBMothParser.PI, 0); }
			public QuantifiedExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterQuantifiedExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitQuantifiedExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitQuantifiedExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class CastPredicateExpressionContext : ExpressionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_CAST() { return GetToken(NBMothParser.BOOL_CAST, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate()
			{
				return GetRuleContext<PredicateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			public CastPredicateExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterCastPredicateExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitCastPredicateExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitCastPredicateExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class SequenceEnumerationExpressionContext : ExpressionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(NBMothParser.LEFT_BRACKET, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(NBMothParser.RIGHT_BRACKET, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public Expression_listContext expression_list()
			{
				return GetRuleContext<Expression_listContext>(0);
			}
			public SequenceEnumerationExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterSequenceEnumerationExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitSequenceEnumerationExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitSequenceEnumerationExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class NumberExpressionContext : ExpressionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(NBMothParser.Number, 0); }
			public NumberExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterNumberExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitNumberExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitNumberExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class FunctionCallExpressionContext : ExpressionContext
		{
			public IList<ExpressionContext> exprs = new List<ExpressionContext>();
			public ExpressionContext _expression;
			public IList<ExpressionContext> _exprs = new List<ExpressionContext>();
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext[] expression()
			{
				return GetRuleContexts<ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression(int i)
			{
				return GetRuleContext<ExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NBMothParser.COMMA); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode COMMA(int i)
			{
				return GetToken(NBMothParser.COMMA, i);
			}
			public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class IdentifierExpressionContext : ExpressionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NBMothParser.IDENTIFIER, 0); }
			public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterIdentifierExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitIdentifierExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class ExpressionOperatorContext : ExpressionContext
		{
			public IToken @operator;
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(NBMothParser.NATURAL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL1() { return GetToken(NBMothParser.NATURAL1, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(NBMothParser.INTEGER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(NBMothParser.INT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAT() { return GetToken(NBMothParser.NAT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAT1() { return GetToken(NBMothParser.NAT1, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MININT() { return GetToken(NBMothParser.MININT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXINT() { return GetToken(NBMothParser.MAXINT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(NBMothParser.BOOL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(NBMothParser.TRUE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(NBMothParser.FALSE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext[] expression()
			{
				return GetRuleContexts<ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression(int i)
			{
				return GetRuleContext<ExpressionContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOM() { return GetToken(NBMothParser.DOM, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAN() { return GetToken(NBMothParser.RAN, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARD() { return GetToken(NBMothParser.CARD, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONC() { return GetToken(NBMothParser.CONC, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(NBMothParser.FIRST, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRONT() { return GetToken(NBMothParser.FRONT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NBMothParser.ID, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISEQ() { return GetToken(NBMothParser.ISEQ, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISEQ1() { return GetToken(NBMothParser.ISEQ1, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(NBMothParser.LAST, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(NBMothParser.MAX, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(NBMothParser.MIN, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(NBMothParser.POW, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REV() { return GetToken(NBMothParser.REV, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQ() { return GetToken(NBMothParser.SEQ, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQ1() { return GetToken(NBMothParser.SEQ1, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAIL() { return GetToken(NBMothParser.TAIL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERALIZED_UNION() { return GetToken(NBMothParser.GENERALIZED_UNION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERALIZED_INTER() { return GetToken(NBMothParser.GENERALIZED_INTER, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(NBMothParser.MINUS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER_OF() { return GetToken(NBMothParser.POWER_OF, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(NBMothParser.MULT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(NBMothParser.DIVIDE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(NBMothParser.MOD, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(NBMothParser.PLUS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SUBTRACTION() { return GetToken(NBMothParser.SET_SUBTRACTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(NBMothParser.INTERVAL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERWRITE_RELATION() { return GetToken(NBMothParser.OVERWRITE_RELATION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_PRODUCT() { return GetToken(NBMothParser.DIRECT_PRODUCT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(NBMothParser.CONCAT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_RESTRICTION() { return GetToken(NBMothParser.DOMAIN_RESTRICTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_SUBTRACTION() { return GetToken(NBMothParser.DOMAIN_SUBTRACTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_RESTRICTION() { return GetToken(NBMothParser.RANGE_RESTRICTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_SUBTRACTION() { return GetToken(NBMothParser.RANGE_SUBTRACTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_FRONT() { return GetToken(NBMothParser.INSERT_FRONT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_TAIL() { return GetToken(NBMothParser.INSERT_TAIL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(NBMothParser.UNION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECTION() { return GetToken(NBMothParser.INTERSECTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_FRONT() { return GetToken(NBMothParser.RESTRICT_FRONT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_TAIL() { return GetToken(NBMothParser.RESTRICT_TAIL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPLET() { return GetToken(NBMothParser.MAPLET, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_RELATION() { return GetToken(NBMothParser.SET_RELATION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_FUNCTION() { return GetToken(NBMothParser.PARTIAL_FUNCTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOTAL_FUNCTION() { return GetToken(NBMothParser.TOTAL_FUNCTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOTAL_INJECTION() { return GetToken(NBMothParser.TOTAL_INJECTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_INJECTION() { return GetToken(NBMothParser.PARTIAL_INJECTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOTAL_SURJECTION() { return GetToken(NBMothParser.TOTAL_SURJECTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_SURJECTION() { return GetToken(NBMothParser.PARTIAL_SURJECTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOTAL_BIJECTION() { return GetToken(NBMothParser.TOTAL_BIJECTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_BIJECTION() { return GetToken(NBMothParser.PARTIAL_BIJECTION, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(NBMothParser.TILDE, 0); }
			public ExpressionOperatorContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterExpressionOperator(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitExpressionOperator(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitExpressionOperator(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class ParenthesesExpressionContext : ExpressionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			public ParenthesesExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterParenthesesExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitParenthesesExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitParenthesesExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class StringExpressionContext : ExpressionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(NBMothParser.StringLiteral, 0); }
			public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterStringExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitStringExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class EmptySetExpressionContext : ExpressionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(NBMothParser.LEFT_BRACE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(NBMothParser.RIGHT_BRACE, 0); }
			public EmptySetExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterEmptySetExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitEmptySetExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitEmptySetExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class NestedCoupleAsTupleExpressionContext : ExpressionContext
		{
			public ExpressionContext _expression;
			public IList<ExpressionContext> _exprs = new List<ExpressionContext>();
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(NBMothParser.LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NBMothParser.COMMA); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ITerminalNode COMMA(int i)
			{
				return GetToken(NBMothParser.COMMA, i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(NBMothParser.RIGHT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext[] expression()
			{
				return GetRuleContexts<ExpressionContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public ExpressionContext expression(int i)
			{
				return GetRuleContext<ExpressionContext>(i);
			}
			public NestedCoupleAsTupleExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterNestedCoupleAsTupleExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitNestedCoupleAsTupleExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitNestedCoupleAsTupleExpression(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class EmptySequenceExpressionContext : ExpressionContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(NBMothParser.LESS, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(NBMothParser.GREATER, 0); }
			public EmptySequenceExpressionContext(ExpressionContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterEmptySequenceExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitEmptySequenceExpression(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitEmptySequenceExpression(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ExpressionContext expression()
		{
			return expression(0);
		}

		private ExpressionContext expression(int _p)
		{
			ParserRuleContext _parentctx = Context;
			int _parentState = State;
			ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
			ExpressionContext _prevctx = _localctx;
			int _startState = 28;
			EnterRecursionRule(_localctx, 28, RULE_expression, _p);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 395;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 31, Context))
					{
						case 1:
							{
								_localctx = new NumberExpressionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;

								State = 334;
								Match(Number);
							}
							break;
						case 2:
							{
								_localctx = new ParenthesesExpressionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 335;
								Match(LEFT_PAR);
								State = 336;
								expression(0);
								State = 337;
								Match(RIGHT_PAR);
							}
							break;
						case 3:
							{
								_localctx = new CastPredicateExpressionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 339;
								Match(BOOL_CAST);
								State = 340;
								Match(LEFT_PAR);
								State = 341;
								predicate(0);
								State = 342;
								Match(RIGHT_PAR);
							}
							break;
						case 4:
							{
								_localctx = new IdentifierExpressionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 344;
								Match(IDENTIFIER);
							}
							break;
						case 5:
							{
								_localctx = new StringExpressionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 345;
								Match(StringLiteral);
							}
							break;
						case 6:
							{
								_localctx = new EmptySetExpressionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 346;
								Match(LEFT_BRACE);
								State = 347;
								Match(RIGHT_BRACE);
							}
							break;
						case 7:
							{
								_localctx = new SetEnumerationExpressionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 348;
								Match(LEFT_BRACE);
								State = 349;
								expression_list();
								State = 350;
								Match(RIGHT_BRACE);
							}
							break;
						case 8:
							{
								_localctx = new SetComprehensionExpressionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 352;
								Match(LEFT_BRACE);
								State = 353;
								identifier_list();
								State = 354;
								Match(VERTICAL_BAR);
								State = 355;
								predicate(0);
								State = 356;
								Match(RIGHT_BRACE);
							}
							break;
						case 9:
							{
								_localctx = new NestedCoupleAsTupleExpressionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 358;
								Match(LEFT_PAR);
								State = 359;
								((NestedCoupleAsTupleExpressionContext)_localctx)._expression = expression(0);
								((NestedCoupleAsTupleExpressionContext)_localctx)._exprs.Add(((NestedCoupleAsTupleExpressionContext)_localctx)._expression);
								State = 360;
								Match(COMMA);
								State = 361;
								((NestedCoupleAsTupleExpressionContext)_localctx)._expression = expression(0);
								((NestedCoupleAsTupleExpressionContext)_localctx)._exprs.Add(((NestedCoupleAsTupleExpressionContext)_localctx)._expression);
								State = 366;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (_la == COMMA)
								{
									{
										{
											State = 362;
											Match(COMMA);
											State = 363;
											((NestedCoupleAsTupleExpressionContext)_localctx)._expression = expression(0);
											((NestedCoupleAsTupleExpressionContext)_localctx)._exprs.Add(((NestedCoupleAsTupleExpressionContext)_localctx)._expression);
										}
									}
									State = 368;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								State = 369;
								Match(RIGHT_PAR);
							}
							break;
						case 10:
							{
								_localctx = new SequenceEnumerationExpressionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 371;
								Match(LEFT_BRACKET);
								State = 373;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Number) | (1L << LEFT_BRACE) | (1L << LEFT_PAR) | (1L << LEFT_BRACKET) | (1L << MINUS) | (1L << BOOL_CAST))) != 0) || ((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (LESS - 96)) | (1L << (TRUE - 96)) | (1L << (FALSE - 96)) | (1L << (DOM - 96)) | (1L << (RAN - 96)) | (1L << (CARD - 96)) | (1L << (CONC - 96)) | (1L << (FIRST - 96)) | (1L << (FRONT - 96)) | (1L << (ID - 96)) | (1L << (ISEQ - 96)) | (1L << (ISEQ1 - 96)) | (1L << (LAST - 96)) | (1L << (MAX - 96)) | (1L << (MIN - 96)) | (1L << (POW - 96)) | (1L << (REV - 96)) | (1L << (SEQ - 96)) | (1L << (SEQ1 - 96)) | (1L << (TAIL - 96)) | (1L << (GENERALIZED_UNION - 96)) | (1L << (GENERALIZED_INTER - 96)) | (1L << (NATURAL - 96)) | (1L << (NATURAL1 - 96)) | (1L << (INTEGER - 96)) | (1L << (INT - 96)) | (1L << (NAT - 96)) | (1L << (NAT1 - 96)) | (1L << (BOOL - 96)) | (1L << (MININT - 96)) | (1L << (MAXINT - 96)) | (1L << (SIGMA - 96)) | (1L << (PI - 96)) | (1L << (QUANTIFIED_UNION - 96)) | (1L << (QUANTIFIED_INTER - 96)) | (1L << (StringLiteral - 96)) | (1L << (IDENTIFIER - 96)))) != 0))
								{
									{
										State = 372;
										expression_list();
									}
								}

								State = 375;
								Match(RIGHT_BRACKET);
							}
							break;
						case 11:
							{
								_localctx = new EmptySequenceExpressionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 376;
								Match(LESS);
								State = 377;
								Match(GREATER);
							}
							break;
						case 12:
							{
								_localctx = new ExpressionOperatorContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 378;
								((ExpressionOperatorContext)_localctx).@operator = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if (!(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (TRUE - 100)) | (1L << (FALSE - 100)) | (1L << (NATURAL - 100)) | (1L << (NATURAL1 - 100)) | (1L << (INTEGER - 100)) | (1L << (INT - 100)) | (1L << (NAT - 100)) | (1L << (NAT1 - 100)) | (1L << (BOOL - 100)) | (1L << (MININT - 100)) | (1L << (MAXINT - 100)))) != 0)))
								{
									((ExpressionOperatorContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
							}
							break;
						case 13:
							{
								_localctx = new ExpressionOperatorContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 379;
								((ExpressionOperatorContext)_localctx).@operator = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if (!(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (DOM - 114)) | (1L << (RAN - 114)) | (1L << (CARD - 114)) | (1L << (CONC - 114)) | (1L << (FIRST - 114)) | (1L << (FRONT - 114)) | (1L << (ID - 114)) | (1L << (ISEQ - 114)) | (1L << (ISEQ1 - 114)) | (1L << (LAST - 114)) | (1L << (MAX - 114)) | (1L << (MIN - 114)) | (1L << (POW - 114)) | (1L << (REV - 114)) | (1L << (SEQ - 114)) | (1L << (SEQ1 - 114)) | (1L << (TAIL - 114)) | (1L << (GENERALIZED_UNION - 114)) | (1L << (GENERALIZED_INTER - 114)))) != 0)))
								{
									((ExpressionOperatorContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
								State = 380;
								Match(LEFT_PAR);
								State = 381;
								expression(0);
								State = 382;
								Match(RIGHT_PAR);
							}
							break;
						case 14:
							{
								_localctx = new QuantifiedExpressionContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 384;
								((QuantifiedExpressionContext)_localctx).@operator = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if (!(((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (SIGMA - 142)) | (1L << (PI - 142)) | (1L << (QUANTIFIED_UNION - 142)) | (1L << (QUANTIFIED_INTER - 142)))) != 0)))
								{
									((QuantifiedExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
								State = 385;
								quantified_variables_list();
								State = 386;
								Match(DOT);
								State = 387;
								Match(LEFT_PAR);
								State = 388;
								predicate(0);
								State = 389;
								Match(VERTICAL_BAR);
								State = 390;
								expression(0);
								State = 391;
								Match(RIGHT_PAR);
							}
							break;
						case 15:
							{
								_localctx = new ExpressionOperatorContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 393;
								((ExpressionOperatorContext)_localctx).@operator = Match(MINUS);
								State = 394;
								expression(7);
							}
							break;
					}
					Context.Stop = TokenStream.LT(-1);
					State = 431;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 34, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							if (ParseListeners != null)
								TriggerExitRuleEvent();
							_prevctx = _localctx;
							{
								State = 429;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 33, Context))
								{
									case 1:
										{
											_localctx = new ExpressionOperatorContext(new ExpressionContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 397;
											if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
											State = 398;
											((ExpressionOperatorContext)_localctx).@operator = Match(POWER_OF);
											State = 399;
											expression(6);
										}
										break;
									case 2:
										{
											_localctx = new ExpressionOperatorContext(new ExpressionContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 400;
											if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
											State = 401;
											((ExpressionOperatorContext)_localctx).@operator = TokenStream.LT(1);
											_la = TokenStream.LA(1);
											if (!(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (MULT - 81)) | (1L << (DIVIDE - 81)) | (1L << (MOD - 81)))) != 0)))
											{
												((ExpressionOperatorContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
											}
											else
											{
												ErrorHandler.ReportMatch(this);
												Consume();
											}
											State = 402;
											expression(6);
										}
										break;
									case 3:
										{
											_localctx = new ExpressionOperatorContext(new ExpressionContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 403;
											if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
											State = 404;
											((ExpressionOperatorContext)_localctx).@operator = TokenStream.LT(1);
											_la = TokenStream.LA(1);
											if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << SET_SUBTRACTION) | (1L << PLUS))) != 0)))
											{
												((ExpressionOperatorContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
											}
											else
											{
												ErrorHandler.ReportMatch(this);
												Consume();
											}
											State = 405;
											expression(5);
										}
										break;
									case 4:
										{
											_localctx = new ExpressionOperatorContext(new ExpressionContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 406;
											if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
											State = 407;
											((ExpressionOperatorContext)_localctx).@operator = Match(INTERVAL);
											State = 408;
											expression(4);
										}
										break;
									case 5:
										{
											_localctx = new ExpressionOperatorContext(new ExpressionContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 409;
											if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
											State = 410;
											((ExpressionOperatorContext)_localctx).@operator = TokenStream.LT(1);
											_la = TokenStream.LA(1);
											if (!(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (OVERWRITE_RELATION - 66)) | (1L << (DIRECT_PRODUCT - 66)) | (1L << (CONCAT - 66)) | (1L << (DOMAIN_RESTRICTION - 66)) | (1L << (DOMAIN_SUBTRACTION - 66)) | (1L << (RANGE_RESTRICTION - 66)) | (1L << (RANGE_SUBTRACTION - 66)) | (1L << (INSERT_FRONT - 66)) | (1L << (INSERT_TAIL - 66)) | (1L << (INTERSECTION - 66)) | (1L << (RESTRICT_FRONT - 66)) | (1L << (RESTRICT_TAIL - 66)) | (1L << (MAPLET - 66)) | (1L << (UNION - 66)))) != 0)))
											{
												((ExpressionOperatorContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
											}
											else
											{
												ErrorHandler.ReportMatch(this);
												Consume();
											}
											State = 411;
											expression(3);
										}
										break;
									case 6:
										{
											_localctx = new ExpressionOperatorContext(new ExpressionContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 412;
											if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
											State = 413;
											((ExpressionOperatorContext)_localctx).@operator = TokenStream.LT(1);
											_la = TokenStream.LA(1);
											if (!(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (SET_RELATION - 102)) | (1L << (PARTIAL_FUNCTION - 102)) | (1L << (TOTAL_FUNCTION - 102)) | (1L << (TOTAL_INJECTION - 102)) | (1L << (PARTIAL_INJECTION - 102)) | (1L << (TOTAL_SURJECTION - 102)) | (1L << (PARTIAL_SURJECTION - 102)) | (1L << (TOTAL_BIJECTION - 102)) | (1L << (PARTIAL_BIJECTION - 102)))) != 0)))
											{
												((ExpressionOperatorContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
											}
											else
											{
												ErrorHandler.ReportMatch(this);
												Consume();
											}
											State = 414;
											expression(2);
										}
										break;
									case 7:
										{
											_localctx = new FunctionCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
											((FunctionCallExpressionContext)_localctx).exprs.Add(_prevctx);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 415;
											if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
											State = 416;
											Match(LEFT_PAR);
											State = 417;
											((FunctionCallExpressionContext)_localctx)._expression = expression(0);
											((FunctionCallExpressionContext)_localctx)._exprs.Add(((FunctionCallExpressionContext)_localctx)._expression);
											State = 422;
											ErrorHandler.Sync(this);
											_la = TokenStream.LA(1);
											while (_la == COMMA)
											{
												{
													{
														State = 418;
														Match(COMMA);
														State = 419;
														((FunctionCallExpressionContext)_localctx)._expression = expression(0);
														((FunctionCallExpressionContext)_localctx)._exprs.Add(((FunctionCallExpressionContext)_localctx)._expression);
													}
												}
												State = 424;
												ErrorHandler.Sync(this);
												_la = TokenStream.LA(1);
											}
											State = 425;
											Match(RIGHT_PAR);
										}
										break;
									case 8:
										{
											_localctx = new ExpressionOperatorContext(new ExpressionContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 427;
											if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
											State = 428;
											((ExpressionOperatorContext)_localctx).@operator = Match(TILDE);
										}
										break;
								}
							}
						}
						State = 433;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 34, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				UnrollRecursionContexts(_parentctx);
			}
			return _localctx;
		}

		public partial class LtlStartContext : ParserRuleContext
		{
			[System.Diagnostics.DebuggerNonUserCode]
			public LtlFormulaContext ltlFormula()
			{
				return GetRuleContext<LtlFormulaContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(NBMothParser.Eof, 0); }
			public LtlStartContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_ltlStart; } }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterLtlStart(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitLtlStart(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLtlStart(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public LtlStartContext ltlStart()
		{
			LtlStartContext _localctx = new LtlStartContext(Context, State);
			EnterRule(_localctx, 30, RULE_ltlStart);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 434;
					ltlFormula(0);
					State = 435;
					Match(Eof);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class LtlFormulaContext : ParserRuleContext
		{
			public LtlFormulaContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_ltlFormula; } }

			public LtlFormulaContext() { }
			public virtual void CopyFrom(LtlFormulaContext context)
			{
				base.CopyFrom(context);
			}
		}
		public partial class LTLParenthesesContext : LtlFormulaContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_LEFT_PAR() { return GetToken(NBMothParser.LTL_LEFT_PAR, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public LtlFormulaContext ltlFormula()
			{
				return GetRuleContext<LtlFormulaContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_RIGHT_PAR() { return GetToken(NBMothParser.LTL_RIGHT_PAR, 0); }
			public LTLParenthesesContext(LtlFormulaContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterLTLParentheses(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitLTLParentheses(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLTLParentheses(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class LTLBPredicateContext : LtlFormulaContext
		{
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_B_START() { return GetToken(NBMothParser.LTL_B_START, 0); }
			[System.Diagnostics.DebuggerNonUserCode]
			public PredicateContext predicate()
			{
				return GetRuleContext<PredicateContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B_END() { return GetToken(NBMothParser.B_END, 0); }
			public LTLBPredicateContext(LtlFormulaContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterLTLBPredicate(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitLTLBPredicate(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLTLBPredicate(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class LTLPrefixOperatorContext : LtlFormulaContext
		{
			public IToken @operator;
			[System.Diagnostics.DebuggerNonUserCode]
			public LtlFormulaContext ltlFormula()
			{
				return GetRuleContext<LtlFormulaContext>(0);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_GLOBALLY() { return GetToken(NBMothParser.LTL_GLOBALLY, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_FINALLY() { return GetToken(NBMothParser.LTL_FINALLY, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_NEXT() { return GetToken(NBMothParser.LTL_NEXT, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_NOT() { return GetToken(NBMothParser.LTL_NOT, 0); }
			public LTLPrefixOperatorContext(LtlFormulaContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterLTLPrefixOperator(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitLTLPrefixOperator(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLTLPrefixOperator(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class LTLKeywordContext : LtlFormulaContext
		{
			public IToken keyword;
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_TRUE() { return GetToken(NBMothParser.LTL_TRUE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_FALSE() { return GetToken(NBMothParser.LTL_FALSE, 0); }
			public LTLKeywordContext(LtlFormulaContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterLTLKeyword(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitLTLKeyword(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLTLKeyword(this);
				else return visitor.VisitChildren(this);
			}
		}
		public partial class LTLInfixOperatorContext : LtlFormulaContext
		{
			public IToken @operator;
			[System.Diagnostics.DebuggerNonUserCode]
			public LtlFormulaContext[] ltlFormula()
			{
				return GetRuleContexts<LtlFormulaContext>();
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public LtlFormulaContext ltlFormula(int i)
			{
				return GetRuleContext<LtlFormulaContext>(i);
			}
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_IMPLIES() { return GetToken(NBMothParser.LTL_IMPLIES, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_UNTIL() { return GetToken(NBMothParser.LTL_UNTIL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_WEAK_UNTIL() { return GetToken(NBMothParser.LTL_WEAK_UNTIL, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_RELEASE() { return GetToken(NBMothParser.LTL_RELEASE, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_AND() { return GetToken(NBMothParser.LTL_AND, 0); }
			[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTL_OR() { return GetToken(NBMothParser.LTL_OR, 0); }
			public LTLInfixOperatorContext(LtlFormulaContext context) { CopyFrom(context); }
			[System.Diagnostics.DebuggerNonUserCode]
			public override void EnterRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.EnterLTLInfixOperator(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override void ExitRule(IParseTreeListener listener)
			{
				INBMothParserListener typedListener = listener as INBMothParserListener;
				if (typedListener != null) typedListener.ExitLTLInfixOperator(this);
			}
			[System.Diagnostics.DebuggerNonUserCode]
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				INBMothParserVisitor<TResult> typedVisitor = visitor as INBMothParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLTLInfixOperator(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public LtlFormulaContext ltlFormula()
		{
			return ltlFormula(0);
		}

		private LtlFormulaContext ltlFormula(int _p)
		{
			ParserRuleContext _parentctx = Context;
			int _parentState = State;
			LtlFormulaContext _localctx = new LtlFormulaContext(Context, _parentState);
			LtlFormulaContext _prevctx = _localctx;
			int _startState = 32;
			EnterRecursionRule(_localctx, 32, RULE_ltlFormula, _p);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 449;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1))
					{
						case LTL_LEFT_PAR:
							{
								_localctx = new LTLParenthesesContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;

								State = 438;
								Match(LTL_LEFT_PAR);
								State = 439;
								ltlFormula(0);
								State = 440;
								Match(LTL_RIGHT_PAR);
							}
							break;
						case LTL_TRUE:
						case LTL_FALSE:
							{
								_localctx = new LTLKeywordContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 442;
								((LTLKeywordContext)_localctx).keyword = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if (!(_la == LTL_TRUE || _la == LTL_FALSE))
								{
									((LTLKeywordContext)_localctx).keyword = ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
							}
							break;
						case LTL_NOT:
						case LTL_GLOBALLY:
						case LTL_FINALLY:
						case LTL_NEXT:
							{
								_localctx = new LTLPrefixOperatorContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 443;
								((LTLPrefixOperatorContext)_localctx).@operator = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if (!(((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (LTL_NOT - 158)) | (1L << (LTL_GLOBALLY - 158)) | (1L << (LTL_FINALLY - 158)) | (1L << (LTL_NEXT - 158)))) != 0)))
								{
									((LTLPrefixOperatorContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
								State = 444;
								ltlFormula(5);
							}
							break;
						case LTL_B_START:
							{
								_localctx = new LTLBPredicateContext(_localctx);
								Context = _localctx;
								_prevctx = _localctx;
								State = 445;
								Match(LTL_B_START);
								State = 446;
								predicate(0);
								State = 447;
								Match(B_END);
							}
							break;
						default:
							throw new NoViableAltException(this);
					}
					Context.Stop = TokenStream.LT(-1);
					State = 462;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 37, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							if (ParseListeners != null)
								TriggerExitRuleEvent();
							_prevctx = _localctx;
							{
								State = 460;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 36, Context))
								{
									case 1:
										{
											_localctx = new LTLInfixOperatorContext(new LtlFormulaContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_ltlFormula);
											State = 451;
											if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
											State = 452;
											((LTLInfixOperatorContext)_localctx).@operator = Match(LTL_IMPLIES);
											State = 453;
											ltlFormula(4);
										}
										break;
									case 2:
										{
											_localctx = new LTLInfixOperatorContext(new LtlFormulaContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_ltlFormula);
											State = 454;
											if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
											State = 455;
											((LTLInfixOperatorContext)_localctx).@operator = TokenStream.LT(1);
											_la = TokenStream.LA(1);
											if (!(((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (LTL_UNTIL - 163)) | (1L << (LTL_WEAK_UNTIL - 163)) | (1L << (LTL_RELEASE - 163)))) != 0)))
											{
												((LTLInfixOperatorContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
											}
											else
											{
												ErrorHandler.ReportMatch(this);
												Consume();
											}
											State = 456;
											ltlFormula(3);
										}
										break;
									case 3:
										{
											_localctx = new LTLInfixOperatorContext(new LtlFormulaContext(_parentctx, _parentState));
											PushNewRecursionContext(_localctx, _startState, RULE_ltlFormula);
											State = 457;
											if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
											State = 458;
											((LTLInfixOperatorContext)_localctx).@operator = TokenStream.LT(1);
											_la = TokenStream.LA(1);
											if (!(_la == LTL_AND || _la == LTL_OR))
											{
												((LTLInfixOperatorContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
											}
											else
											{
												ErrorHandler.ReportMatch(this);
												Consume();
											}
											State = 459;
											ltlFormula(2);
										}
										break;
								}
							}
						}
						State = 464;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 37, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				UnrollRecursionContexts(_parentctx);
			}
			return _localctx;
		}

		public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
		{
			switch (ruleIndex)
			{
				case 10: return substitution_sempred((SubstitutionContext)_localctx, predIndex);
				case 13: return predicate_sempred((PredicateContext)_localctx, predIndex);
				case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
				case 16: return ltlFormula_sempred((LtlFormulaContext)_localctx, predIndex);
			}
			return true;
		}
		private bool substitution_sempred(SubstitutionContext _localctx, int predIndex)
		{
			switch (predIndex)
			{
				case 0: return Precpred(Context, 5);
			}
			return true;
		}
		private bool predicate_sempred(PredicateContext _localctx, int predIndex)
		{
			switch (predIndex)
			{
				case 1: return Precpred(Context, 3);
				case 2: return Precpred(Context, 2);
				case 3: return Precpred(Context, 1);
			}
			return true;
		}
		private bool expression_sempred(ExpressionContext _localctx, int predIndex)
		{
			switch (predIndex)
			{
				case 4: return Precpred(Context, 6);
				case 5: return Precpred(Context, 5);
				case 6: return Precpred(Context, 4);
				case 7: return Precpred(Context, 3);
				case 8: return Precpred(Context, 2);
				case 9: return Precpred(Context, 1);
				case 10: return Precpred(Context, 11);
				case 11: return Precpred(Context, 8);
			}
			return true;
		}
		private bool ltlFormula_sempred(LtlFormulaContext _localctx, int predIndex)
		{
			switch (predIndex)
			{
				case 12: return Precpred(Context, 3);
				case 13: return Precpred(Context, 2);
				case 14: return Precpred(Context, 1);
			}
			return true;
		}

		private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
		'\x5964', '\x3', '\xAB', '\x1D4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3',
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4',
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b',
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v',
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t',
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4',
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3',
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3',
		'+', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '.', '\v', '\x3', '\x3',
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3',
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3',
		'\x4', '\x3', '\x4', '\a', '\x4', '<', '\n', '\x4', '\f', '\x4', '\xE',
		'\x4', '?', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3',
		'\x4', '\a', '\x4', '\x45', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'H',
		'\v', '\x4', '\x3', '\x4', '\x5', '\x4', 'K', '\n', '\x4', '\x3', '\x5',
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5',
		'\x3', '\x5', '\x5', '\x5', 'T', '\n', '\x5', '\x3', '\x6', '\x3', '\x6',
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'Z', '\n', '\x6', '\f', '\x6',
		'\xE', '\x6', ']', '\v', '\x6', '\x3', '\x6', '\x5', '\x6', '`', '\n',
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a',
		'\x5', '\a', 'g', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5',
		'\a', 'l', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b',
		'\x3', '\b', '\x5', '\b', 's', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3',
		'\b', '\x5', '\b', 'x', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t',
		'\x5', '\t', '}', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3',
		'\t', '\x3', '\t', '\x5', '\t', '\x84', '\n', '\t', '\x3', '\t', '\x3',
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n',
		'\x3', '\n', '\x5', '\n', '\x8E', '\n', '\n', '\x3', '\v', '\x3', '\v',
		'\x3', '\v', '\a', '\v', '\x93', '\n', '\v', '\f', '\v', '\xE', '\v',
		'\x96', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f',
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3',
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f',
		'\a', '\f', '\xA7', '\n', '\f', '\f', '\f', '\xE', '\f', '\xAA', '\v',
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xAE', '\n', '\f', '\x3',
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f',
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3',
		'\f', '\x3', '\f', '\x3', '\f', '\x6', '\f', '\xBE', '\n', '\f', '\r',
		'\f', '\xE', '\f', '\xBF', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xC4',
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3',
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f',
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3',
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f',
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3',
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f',
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3',
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xEE', '\n', '\f', '\f',
		'\f', '\xE', '\f', '\xF1', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x5',
		'\f', '\xF5', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3',
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f',
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x103', '\n', '\f',
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x108', '\n', '\f',
		'\f', '\f', '\xE', '\f', '\x10B', '\v', '\f', '\x3', '\r', '\x3', '\r',
		'\x3', '\r', '\a', '\r', '\x110', '\n', '\r', '\f', '\r', '\xE', '\r',
		'\x113', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3',
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x11B', '\n', '\xE',
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF',
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF',
		'\x3', '\xF', '\a', '\xF', '\x128', '\n', '\xF', '\f', '\xF', '\xE', '\xF',
		'\x12B', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3',
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3',
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3',
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3',
		'\xF', '\x5', '\xF', '\x140', '\n', '\xF', '\x3', '\xF', '\x3', '\xF',
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF',
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x14B', '\n', '\xF', '\f', '\xF',
		'\xE', '\xF', '\x14E', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x16F',
		'\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x172', '\v', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x178',
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10',
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10',
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10',
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10',
		'\x3', '\x10', '\x5', '\x10', '\x18E', '\n', '\x10', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\a', '\x10', '\x1A7', '\n', '\x10', '\f', '\x10',
		'\xE', '\x10', '\x1AA', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\a', '\x10', '\x1B0', '\n', '\x10', '\f', '\x10',
		'\xE', '\x10', '\x1B3', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3',
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3',
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3',
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x1C4', '\n', '\x12',
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12',
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12',
		'\x1CF', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x1D2', '\v', '\x12',
		'\x3', '\x12', '\x2', '\x6', '\x16', '\x1C', '\x1E', '\"', '\x13', '\x2',
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16',
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '\x2', '\x15', '\x4', '\x2',
		'\a', '\a', '\t', '\t', '\x4', '\x2', '\x6', '\x6', '\b', '\b', '\x3',
		'\x2', '\x14', '\x15', '\x3', '\x2', '[', '\\', '\x3', '\x2', '\'', '(',
		'\x3', '\x2', '\x66', 'g', '\x4', '\x2', 'X', 'X', 'Z', '\x65', '\x3',
		'\x2', '\x42', '\x43', '\x4', '\x2', '\x66', 'g', '\x87', '\x8F', '\x3',
		'\x2', 't', '\x86', '\x3', '\x2', '\x90', '\x93', '\x3', '\x2', 'S', 'U',
		'\x3', '\x2', '\x34', '\x36', '\x3', '\x2', '\x44', 'Q', '\x3', '\x2',
		'h', 'p', '\x3', '\x2', '\x9B', '\x9C', '\x5', '\x2', '\xA0', '\xA0',
		'\xA3', '\xA4', '\xA8', '\xA8', '\x3', '\x2', '\xA5', '\xA7', '\x3', '\x2',
		'\x9E', '\x9F', '\x2', '\x213', '\x2', '$', '\x3', '\x2', '\x2', '\x2',
		'\x4', '\'', '\x3', '\x2', '\x2', '\x2', '\x6', 'J', '\x3', '\x2', '\x2',
		'\x2', '\b', 'S', '\x3', '\x2', '\x2', '\x2', '\n', 'U', '\x3', '\x2',
		'\x2', '\x2', '\f', 'k', '\x3', '\x2', '\x2', '\x2', '\xE', 'w', '\x3',
		'\x2', '\x2', '\x2', '\x10', '|', '\x3', '\x2', '\x2', '\x2', '\x12',
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x14', '\x8F', '\x3', '\x2', '\x2',
		'\x2', '\x16', '\x102', '\x3', '\x2', '\x2', '\x2', '\x18', '\x10C', '\x3',
		'\x2', '\x2', '\x2', '\x1A', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x1C',
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x18D', '\x3', '\x2', '\x2',
		'\x2', ' ', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\"', '\x1C3', '\x3',
		'\x2', '\x2', '\x2', '$', '%', '\x5', '\x4', '\x3', '\x2', '%', '&', '\a',
		'\x2', '\x2', '\x3', '&', '\x3', '\x3', '\x2', '\x2', '\x2', '\'', '(',
		'\a', '\x4', '\x2', '\x2', '(', ',', '\a', '\x95', '\x2', '\x2', ')',
		'+', '\x5', '\x6', '\x4', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2',
		'+', '.', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2',
		',', '-', '\x3', '\x2', '\x2', '\x2', '-', '/', '\x3', '\x2', '\x2', '\x2',
		'.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\x5', '\x2',
		'\x2', '\x30', '\x5', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\t',
		'\x2', '\x2', '\x2', '\x32', 'K', '\x5', '\x1C', '\xF', '\x2', '\x33',
		'\x34', '\t', '\x3', '\x2', '\x2', '\x34', 'K', '\x5', '\x14', '\v', '\x2',
		'\x35', '\x36', '\a', '\v', '\x2', '\x2', '\x36', 'K', '\x5', '\x16',
		'\f', '\x2', '\x37', '\x38', '\a', '\n', '\x2', '\x2', '\x38', '=', '\x5',
		'\x10', '\t', '\x2', '\x39', ':', '\a', '\x39', '\x2', '\x2', ':', '<',
		'\x5', '\x10', '\t', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', '<',
		'?', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2',
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', 'K', '\x3', '\x2', '\x2', '\x2',
		'?', '=', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '\f', '\x2',
		'\x2', '\x41', '\x46', '\x5', '\b', '\x5', '\x2', '\x42', '\x43', '\a',
		'\x39', '\x2', '\x2', '\x43', '\x45', '\x5', '\b', '\x5', '\x2', '\x44',
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', '\x2', '\x2',
		'\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3',
		'\x2', '\x2', '\x2', 'G', 'K', '\x3', '\x2', '\x2', '\x2', 'H', '\x46',
		'\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x5', '\n', '\x6', '\x2', 'J',
		'\x31', '\x3', '\x2', '\x2', '\x2', 'J', '\x33', '\x3', '\x2', '\x2',
		'\x2', 'J', '\x35', '\x3', '\x2', '\x2', '\x2', 'J', '\x37', '\x3', '\x2',
		'\x2', '\x2', 'J', '@', '\x3', '\x2', '\x2', '\x2', 'J', 'I', '\x3', '\x2',
		'\x2', '\x2', 'K', '\a', '\x3', '\x2', '\x2', '\x2', 'L', 'T', '\a', '\x95',
		'\x2', '\x2', 'M', 'N', '\a', '\x95', '\x2', '\x2', 'N', 'O', '\a', 'X',
		'\x2', '\x2', 'O', 'P', '\a', '.', '\x2', '\x2', 'P', 'Q', '\x5', '\x14',
		'\v', '\x2', 'Q', 'R', '\a', '/', '\x2', '\x2', 'R', 'T', '\x3', '\x2',
		'\x2', '\x2', 'S', 'L', '\x3', '\x2', '\x2', '\x2', 'S', 'M', '\x3', '\x2',
		'\x2', '\x2', 'T', '\t', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\r',
		'\x2', '\x2', 'V', '[', '\x5', '\f', '\a', '\x2', 'W', 'X', '\a', '\x39',
		'\x2', '\x2', 'X', 'Z', '\x5', '\f', '\a', '\x2', 'Y', 'W', '\x3', '\x2',
		'\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2',
		'\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '_', '\x3',
		'\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '`', '\a',
		'\x39', '\x2', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '_', '`',
		'\x3', '\x2', '\x2', '\x2', '`', '\v', '\x3', '\x2', '\x2', '\x2', '\x61',
		'\x66', '\a', '\x95', '\x2', '\x2', '\x62', '\x63', '\a', '\x30', '\x2',
		'\x2', '\x63', '\x64', '\x5', '\x14', '\v', '\x2', '\x64', '\x65', '\a',
		'\x31', '\x2', '\x2', '\x65', 'g', '\x3', '\x2', '\x2', '\x2', '\x66',
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2',
		'\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', 'Y', '\x2',
		'\x2', 'i', 'l', '\x5', '\xE', '\b', '\x2', 'j', 'l', '\a', '\x94', '\x2',
		'\x2', 'k', '\x61', '\x3', '\x2', '\x2', '\x2', 'k', 'j', '\x3', '\x2',
		'\x2', '\x2', 'l', '\r', '\x3', '\x2', '\x2', '\x2', 'm', 'r', '\a', '\x95',
		'\x2', '\x2', 'n', 'o', '\a', '\x30', '\x2', '\x2', 'o', 'p', '\x5', '\x18',
		'\r', '\x2', 'p', 'q', '\a', '\x31', '\x2', '\x2', 'q', 's', '\x3', '\x2',
		'\x2', '\x2', 'r', 'n', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2',
		'\x2', '\x2', 's', 'x', '\x3', '\x2', '\x2', '\x2', 't', 'x', '\x5', '\x1E',
		'\x10', '\x2', 'u', 'x', '\x5', '\x1C', '\xF', '\x2', 'v', 'x', '\x5',
		'\x16', '\f', '\x2', 'w', 'm', '\x3', '\x2', '\x2', '\x2', 'w', 't', '\x3',
		'\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'v', '\x3',
		'\x2', '\x2', '\x2', 'x', '\xF', '\x3', '\x2', '\x2', '\x2', 'y', 'z',
		'\x5', '\x14', '\v', '\x2', 'z', '{', '\a', '?', '\x2', '\x2', '{', '}',
		'\x3', '\x2', '\x2', '\x2', '|', 'y', '\x3', '\x2', '\x2', '\x2', '|',
		'}', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2',
		'~', '\x83', '\a', '\x95', '\x2', '\x2', '\x7F', '\x80', '\a', '\x30',
		'\x2', '\x2', '\x80', '\x81', '\x5', '\x14', '\v', '\x2', '\x81', '\x82',
		'\a', '\x31', '\x2', '\x2', '\x82', '\x84', '\x3', '\x2', '\x2', '\x2',
		'\x83', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2',
		'\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86',
		'\a', 'X', '\x2', '\x2', '\x86', '\x87', '\x5', '\x16', '\f', '\x2', '\x87',
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8E', '\x5', '\x14', '\v',
		'\x2', '\x89', '\x8A', '\a', '\x30', '\x2', '\x2', '\x8A', '\x8B', '\x5',
		'\x14', '\v', '\x2', '\x8B', '\x8C', '\a', '\x31', '\x2', '\x2', '\x8C',
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x88', '\x3', '\x2', '\x2',
		'\x2', '\x8D', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x13', '\x3',
		'\x2', '\x2', '\x2', '\x8F', '\x94', '\a', '\x95', '\x2', '\x2', '\x90',
		'\x91', '\a', '<', '\x2', '\x2', '\x91', '\x93', '\a', '\x95', '\x2',
		'\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\x96', '\x3',
		'\x2', '\x2', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94',
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x15', '\x3', '\x2', '\x2',
		'\x2', '\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\b',
		'\f', '\x1', '\x2', '\x98', '\x99', '\a', '\xE', '\x2', '\x2', '\x99',
		'\x9A', '\x5', '\x16', '\f', '\x2', '\x9A', '\x9B', '\a', '\x5', '\x2',
		'\x2', '\x9B', '\x103', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x103', '\a',
		'\xF', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x18', '\x2', '\x2', '\x9E',
		'\x9F', '\x5', '\x1C', '\xF', '\x2', '\x9F', '\xA0', '\a', '\x12', '\x2',
		'\x2', '\xA0', '\xA8', '\x5', '\x16', '\f', '\x2', '\xA1', '\xA2', '\a',
		'\x19', '\x2', '\x2', '\xA2', '\xA3', '\x5', '\x1C', '\xF', '\x2', '\xA3',
		'\xA4', '\a', '\x12', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\x16', '\f',
		'\x2', '\xA5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA1', '\x3',
		'\x2', '\x2', '\x2', '\xA7', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA8',
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2',
		'\x2', '\xA9', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3',
		'\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', '\x13', '\x2', '\x2', '\xAC',
		'\xAE', '\x5', '\x16', '\f', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2',
		'\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3',
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x5', '\x2', '\x2', '\xB0',
		'\x103', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\a', '\x1A', '\x2',
		'\x2', '\xB2', '\xB3', '\x5', '\x1E', '\x10', '\x2', '\xB3', '\xB4', '\a',
		'\x1B', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x1C', '\x2', '\x2', '\xB5',
		'\xB6', '\x5', '\x18', '\r', '\x2', '\xB6', '\xB7', '\a', '\x12', '\x2',
		'\x2', '\xB7', '\xBD', '\x5', '\x16', '\f', '\x2', '\xB8', '\xB9', '\a',
		'\x17', '\x2', '\x2', '\xB9', '\xBA', '\x5', '\x18', '\r', '\x2', '\xBA',
		'\xBB', '\a', '\x12', '\x2', '\x2', '\xBB', '\xBC', '\x5', '\x16', '\f',
		'\x2', '\xBC', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xB8', '\x3',
		'\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF',
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2',
		'\x2', '\xC0', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a',
		'\x13', '\x2', '\x2', '\xC2', '\xC4', '\x5', '\x16', '\f', '\x2', '\xC3',
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2',
		'\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a',
		'\x5', '\x2', '\x2', '\xC6', '\xC7', '\a', '\x5', '\x2', '\x2', '\xC7',
		'\x103', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\t', '\x4', '\x2',
		'\x2', '\xC9', '\xCA', '\x5', '\x1C', '\xF', '\x2', '\xCA', '\xCB', '\a',
		'\x12', '\x2', '\x2', '\xCB', '\xCC', '\x5', '\x16', '\f', '\x2', '\xCC',
		'\xCD', '\a', '\x5', '\x2', '\x2', '\xCD', '\x103', '\x3', '\x2', '\x2',
		'\x2', '\xCE', '\xCF', '\a', '\x1D', '\x2', '\x2', '\xCF', '\xD0', '\x5',
		'\x14', '\v', '\x2', '\xD0', '\xD1', '\a', '\x1E', '\x2', '\x2', '\xD1',
		'\xD2', '\x5', '\x1C', '\xF', '\x2', '\xD2', '\xD3', '\a', '\x12', '\x2',
		'\x2', '\xD3', '\xD4', '\x5', '\x16', '\f', '\x2', '\xD4', '\xD5', '\a',
		'\x5', '\x2', '\x2', '\xD5', '\x103', '\x3', '\x2', '\x2', '\x2', '\xD6',
		'\xD7', '\x5', '\x14', '\v', '\x2', '\xD7', '\xD8', '\a', '*', '\x2',
		'\x2', '\xD8', '\xD9', '\x5', '\x18', '\r', '\x2', '\xD9', '\x103', '\x3',
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\x5', '\x14', '\v', '\x2', '\xDB',
		'\xDC', '\a', '+', '\x2', '\x2', '\xDC', '\xDD', '\x5', '\x1E', '\x10',
		'\x2', '\xDD', '\x103', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\x5',
		'\x14', '\v', '\x2', '\xDF', '\xE0', '\t', '\x5', '\x2', '\x2', '\xE0',
		'\xE1', '\a', '\x30', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x1C', '\xF',
		'\x2', '\xE2', '\xE3', '\a', '\x31', '\x2', '\x2', '\xE3', '\x103', '\x3',
		'\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x10', '\x2', '\x2', '\xE5',
		'\xE6', '\x5', '\x1C', '\xF', '\x2', '\xE6', '\xE7', '\a', '\x12', '\x2',
		'\x2', '\xE7', '\xEF', '\x5', '\x16', '\f', '\x2', '\xE8', '\xE9', '\a',
		'\x11', '\x2', '\x2', '\xE9', '\xEA', '\x5', '\x1C', '\xF', '\x2', '\xEA',
		'\xEB', '\a', '\x12', '\x2', '\x2', '\xEB', '\xEC', '\x5', '\x16', '\f',
		'\x2', '\xEC', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xED', '\xE8', '\x3',
		'\x2', '\x2', '\x2', '\xEE', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xEF',
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2',
		'\x2', '\xF0', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xEF', '\x3',
		'\x2', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x13', '\x2', '\x2', '\xF3',
		'\xF5', '\x5', '\x16', '\f', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2',
		'\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3',
		'\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x5', '\x2', '\x2', '\xF7',
		'\x103', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', '#', '\x2',
		'\x2', '\xF9', '\xFA', '\x5', '\x1C', '\xF', '\x2', '\xFA', '\xFB', '\a',
		'%', '\x2', '\x2', '\xFB', '\xFC', '\x5', '\x16', '\f', '\x2', '\xFC',
		'\xFD', '\a', '\t', '\x2', '\x2', '\xFD', '\xFE', '\x5', '\x1C', '\xF',
		'\x2', '\xFE', '\xFF', '\a', '$', '\x2', '\x2', '\xFF', '\x100', '\x5',
		'\x1E', '\x10', '\x2', '\x100', '\x101', '\a', '\x5', '\x2', '\x2', '\x101',
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x102', '\x97', '\x3', '\x2', '\x2',
		'\x2', '\x102', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x102', '\x9D', '\x3',
		'\x2', '\x2', '\x2', '\x102', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x102',
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\x102', '\xCE', '\x3', '\x2', '\x2',
		'\x2', '\x102', '\xD6', '\x3', '\x2', '\x2', '\x2', '\x102', '\xDA', '\x3',
		'\x2', '\x2', '\x2', '\x102', '\xDE', '\x3', '\x2', '\x2', '\x2', '\x102',
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\x102', '\xF8', '\x3', '\x2', '\x2',
		'\x2', '\x103', '\x109', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105',
		'\f', '\a', '\x2', '\x2', '\x105', '\x106', '\a', ';', '\x2', '\x2', '\x106',
		'\x108', '\x5', '\x16', '\f', '\b', '\x107', '\x104', '\x3', '\x2', '\x2',
		'\x2', '\x108', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x109', '\x107',
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2',
		'\x10A', '\x17', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3',
		'\x2', '\x2', '\x2', '\x10C', '\x111', '\x5', '\x1E', '\x10', '\x2', '\x10D',
		'\x10E', '\a', '<', '\x2', '\x2', '\x10E', '\x110', '\x5', '\x1E', '\x10',
		'\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x110', '\x113',
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2',
		'\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '\x19', '\x3',
		'\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x114',
		'\x115', '\x5', '\x1C', '\xF', '\x2', '\x115', '\x116', '\a', '\x2', '\x2',
		'\x3', '\x116', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118',
		'\x5', '\x1E', '\x10', '\x2', '\x118', '\x119', '\a', '\x2', '\x2', '\x3',
		'\x119', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x114', '\x3',
		'\x2', '\x2', '\x2', '\x11A', '\x117', '\x3', '\x2', '\x2', '\x2', '\x11B',
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\b', '\xF', '\x1',
		'\x2', '\x11D', '\x11E', '\a', '\x30', '\x2', '\x2', '\x11E', '\x11F',
		'\x5', '\x1C', '\xF', '\x2', '\x11F', '\x120', '\a', '\x31', '\x2', '\x2',
		'\x120', '\x140', '\x3', '\x2', '\x2', '\x2', '\x121', '\x140', '\a',
		'\x95', '\x2', '\x2', '\x122', '\x123', '\a', '\x95', '\x2', '\x2', '\x123',
		'\x124', '\a', '\x30', '\x2', '\x2', '\x124', '\x129', '\x5', '\x1E',
		'\x10', '\x2', '\x125', '\x126', '\a', '<', '\x2', '\x2', '\x126', '\x128',
		'\x5', '\x1E', '\x10', '\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2',
		'\x128', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x129', '\x127', '\x3',
		'\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A',
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2',
		'\x2', '\x12C', '\x12D', '\a', '\x31', '\x2', '\x2', '\x12D', '\x140',
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\t', '\x6', '\x2', '\x2',
		'\x12F', '\x130', '\x5', '\x12', '\n', '\x2', '\x130', '\x131', '\a',
		'&', '\x2', '\x2', '\x131', '\x132', '\a', '\x30', '\x2', '\x2', '\x132',
		'\x133', '\x5', '\x1C', '\xF', '\x2', '\x133', '\x134', '\a', '\x31',
		'\x2', '\x2', '\x134', '\x140', '\x3', '\x2', '\x2', '\x2', '\x135', '\x140',
		'\t', '\a', '\x2', '\x2', '\x136', '\x137', '\a', '@', '\x2', '\x2', '\x137',
		'\x138', '\a', '\x30', '\x2', '\x2', '\x138', '\x139', '\x5', '\x1C',
		'\xF', '\x2', '\x139', '\x13A', '\a', '\x31', '\x2', '\x2', '\x13A', '\x140',
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\x5', '\x1E', '\x10', '\x2',
		'\x13C', '\x13D', '\t', '\b', '\x2', '\x2', '\x13D', '\x13E', '\x5', '\x1E',
		'\x10', '\x2', '\x13E', '\x140', '\x3', '\x2', '\x2', '\x2', '\x13F',
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x121', '\x3', '\x2', '\x2',
		'\x2', '\x13F', '\x122', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x12E',
		'\x3', '\x2', '\x2', '\x2', '\x13F', '\x135', '\x3', '\x2', '\x2', '\x2',
		'\x13F', '\x136', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x13B', '\x3',
		'\x2', '\x2', '\x2', '\x140', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x141',
		'\x142', '\f', '\x5', '\x2', '\x2', '\x142', '\x143', '\a', ',', '\x2',
		'\x2', '\x143', '\x14B', '\x5', '\x1C', '\xF', '\x6', '\x144', '\x145',
		'\f', '\x4', '\x2', '\x2', '\x145', '\x146', '\t', '\t', '\x2', '\x2',
		'\x146', '\x14B', '\x5', '\x1C', '\xF', '\x5', '\x147', '\x148', '\f',
		'\x3', '\x2', '\x2', '\x148', '\x149', '\a', '-', '\x2', '\x2', '\x149',
		'\x14B', '\x5', '\x1C', '\xF', '\x4', '\x14A', '\x141', '\x3', '\x2',
		'\x2', '\x2', '\x14A', '\x144', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x147',
		'\x3', '\x2', '\x2', '\x2', '\x14B', '\x14E', '\x3', '\x2', '\x2', '\x2',
		'\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\x3',
		'\x2', '\x2', '\x2', '\x14D', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x14E',
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\b', '\x10', '\x1',
		'\x2', '\x150', '\x18E', '\a', '\x3', '\x2', '\x2', '\x151', '\x152',
		'\a', '\x30', '\x2', '\x2', '\x152', '\x153', '\x5', '\x1E', '\x10', '\x2',
		'\x153', '\x154', '\a', '\x31', '\x2', '\x2', '\x154', '\x18E', '\x3',
		'\x2', '\x2', '\x2', '\x155', '\x156', '\a', '\x41', '\x2', '\x2', '\x156',
		'\x157', '\a', '\x30', '\x2', '\x2', '\x157', '\x158', '\x5', '\x1C',
		'\xF', '\x2', '\x158', '\x159', '\a', '\x31', '\x2', '\x2', '\x159', '\x18E',
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x18E', '\a', '\x95', '\x2', '\x2',
		'\x15B', '\x18E', '\a', '\x94', '\x2', '\x2', '\x15C', '\x15D', '\a',
		'.', '\x2', '\x2', '\x15D', '\x18E', '\a', '/', '\x2', '\x2', '\x15E',
		'\x15F', '\a', '.', '\x2', '\x2', '\x15F', '\x160', '\x5', '\x18', '\r',
		'\x2', '\x160', '\x161', '\a', '/', '\x2', '\x2', '\x161', '\x18E', '\x3',
		'\x2', '\x2', '\x2', '\x162', '\x163', '\a', '.', '\x2', '\x2', '\x163',
		'\x164', '\x5', '\x14', '\v', '\x2', '\x164', '\x165', '\a', ':', '\x2',
		'\x2', '\x165', '\x166', '\x5', '\x1C', '\xF', '\x2', '\x166', '\x167',
		'\a', '/', '\x2', '\x2', '\x167', '\x18E', '\x3', '\x2', '\x2', '\x2',
		'\x168', '\x169', '\a', '\x30', '\x2', '\x2', '\x169', '\x16A', '\x5',
		'\x1E', '\x10', '\x2', '\x16A', '\x16B', '\a', '<', '\x2', '\x2', '\x16B',
		'\x170', '\x5', '\x1E', '\x10', '\x2', '\x16C', '\x16D', '\a', '<', '\x2',
		'\x2', '\x16D', '\x16F', '\x5', '\x1E', '\x10', '\x2', '\x16E', '\x16C',
		'\x3', '\x2', '\x2', '\x2', '\x16F', '\x172', '\x3', '\x2', '\x2', '\x2',
		'\x170', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x3',
		'\x2', '\x2', '\x2', '\x171', '\x173', '\x3', '\x2', '\x2', '\x2', '\x172',
		'\x170', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\a', '\x31', '\x2',
		'\x2', '\x174', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x175', '\x177',
		'\a', '\x32', '\x2', '\x2', '\x176', '\x178', '\x5', '\x18', '\r', '\x2',
		'\x177', '\x176', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\x3',
		'\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', '\x179',
		'\x18E', '\a', '\x33', '\x2', '\x2', '\x17A', '\x17B', '\a', '\x62', '\x2',
		'\x2', '\x17B', '\x18E', '\a', '\x64', '\x2', '\x2', '\x17C', '\x18E',
		'\t', '\n', '\x2', '\x2', '\x17D', '\x17E', '\t', '\v', '\x2', '\x2',
		'\x17E', '\x17F', '\a', '\x30', '\x2', '\x2', '\x17F', '\x180', '\x5',
		'\x1E', '\x10', '\x2', '\x180', '\x181', '\a', '\x31', '\x2', '\x2', '\x181',
		'\x18E', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\t', '\f', '\x2',
		'\x2', '\x183', '\x184', '\x5', '\x12', '\n', '\x2', '\x184', '\x185',
		'\a', '&', '\x2', '\x2', '\x185', '\x186', '\a', '\x30', '\x2', '\x2',
		'\x186', '\x187', '\x5', '\x1C', '\xF', '\x2', '\x187', '\x188', '\a',
		':', '\x2', '\x2', '\x188', '\x189', '\x5', '\x1E', '\x10', '\x2', '\x189',
		'\x18A', '\a', '\x31', '\x2', '\x2', '\x18A', '\x18E', '\x3', '\x2', '\x2',
		'\x2', '\x18B', '\x18C', '\a', '\x34', '\x2', '\x2', '\x18C', '\x18E',
		'\x5', '\x1E', '\x10', '\t', '\x18D', '\x14F', '\x3', '\x2', '\x2', '\x2',
		'\x18D', '\x151', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x155', '\x3',
		'\x2', '\x2', '\x2', '\x18D', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x18D',
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x15C', '\x3', '\x2', '\x2',
		'\x2', '\x18D', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x162',
		'\x3', '\x2', '\x2', '\x2', '\x18D', '\x168', '\x3', '\x2', '\x2', '\x2',
		'\x18D', '\x175', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x17A', '\x3',
		'\x2', '\x2', '\x2', '\x18D', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x18D',
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x182', '\x3', '\x2', '\x2',
		'\x2', '\x18D', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x1B1',
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\f', '\b', '\x2', '\x2',
		'\x190', '\x191', '\a', 'V', '\x2', '\x2', '\x191', '\x1B0', '\x5', '\x1E',
		'\x10', '\b', '\x192', '\x193', '\f', '\a', '\x2', '\x2', '\x193', '\x194',
		'\t', '\r', '\x2', '\x2', '\x194', '\x1B0', '\x5', '\x1E', '\x10', '\b',
		'\x195', '\x196', '\f', '\x6', '\x2', '\x2', '\x196', '\x197', '\t', '\xE',
		'\x2', '\x2', '\x197', '\x1B0', '\x5', '\x1E', '\x10', '\a', '\x198',
		'\x199', '\f', '\x5', '\x2', '\x2', '\x199', '\x19A', '\a', 'W', '\x2',
		'\x2', '\x19A', '\x1B0', '\x5', '\x1E', '\x10', '\x6', '\x19B', '\x19C',
		'\f', '\x4', '\x2', '\x2', '\x19C', '\x19D', '\t', '\xF', '\x2', '\x2',
		'\x19D', '\x1B0', '\x5', '\x1E', '\x10', '\x5', '\x19E', '\x19F', '\f',
		'\x3', '\x2', '\x2', '\x19F', '\x1A0', '\t', '\x10', '\x2', '\x2', '\x1A0',
		'\x1B0', '\x5', '\x1E', '\x10', '\x4', '\x1A1', '\x1A2', '\f', '\r', '\x2',
		'\x2', '\x1A2', '\x1A3', '\a', '\x30', '\x2', '\x2', '\x1A3', '\x1A8',
		'\x5', '\x1E', '\x10', '\x2', '\x1A4', '\x1A5', '\a', '<', '\x2', '\x2',
		'\x1A5', '\x1A7', '\x5', '\x1E', '\x10', '\x2', '\x1A6', '\x1A4', '\x3',
		'\x2', '\x2', '\x2', '\x1A7', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1A8',
		'\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2',
		'\x2', '\x1A9', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1A8',
		'\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\a', '\x31', '\x2', '\x2',
		'\x1AC', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\f',
		'\n', '\x2', '\x2', '\x1AE', '\x1B0', '\a', '\x38', '\x2', '\x2', '\x1AF',
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x192', '\x3', '\x2', '\x2',
		'\x2', '\x1AF', '\x195', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x198',
		'\x3', '\x2', '\x2', '\x2', '\x1AF', '\x19B', '\x3', '\x2', '\x2', '\x2',
		'\x1AF', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1A1', '\x3',
		'\x2', '\x2', '\x2', '\x1AF', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1B0',
		'\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1AF', '\x3', '\x2', '\x2',
		'\x2', '\x1B1', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1F',
		'\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B1', '\x3', '\x2', '\x2', '\x2',
		'\x1B4', '\x1B5', '\x5', '\"', '\x12', '\x2', '\x1B5', '\x1B6', '\a',
		'\x2', '\x2', '\x3', '\x1B6', '!', '\x3', '\x2', '\x2', '\x2', '\x1B7',
		'\x1B8', '\b', '\x12', '\x1', '\x2', '\x1B8', '\x1B9', '\a', '\xA1', '\x2',
		'\x2', '\x1B9', '\x1BA', '\x5', '\"', '\x12', '\x2', '\x1BA', '\x1BB',
		'\a', '\xA2', '\x2', '\x2', '\x1BB', '\x1C4', '\x3', '\x2', '\x2', '\x2',
		'\x1BC', '\x1C4', '\t', '\x11', '\x2', '\x2', '\x1BD', '\x1BE', '\t',
		'\x12', '\x2', '\x2', '\x1BE', '\x1C4', '\x5', '\"', '\x12', '\a', '\x1BF',
		'\x1C0', '\a', '\xA9', '\x2', '\x2', '\x1C0', '\x1C1', '\x5', '\x1C',
		'\xF', '\x2', '\x1C1', '\x1C2', '\a', '\x99', '\x2', '\x2', '\x1C2', '\x1C4',
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1B7', '\x3', '\x2', '\x2', '\x2',
		'\x1C3', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1BD', '\x3',
		'\x2', '\x2', '\x2', '\x1C3', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C4',
		'\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\f', '\x5', '\x2',
		'\x2', '\x1C6', '\x1C7', '\a', '\x9D', '\x2', '\x2', '\x1C7', '\x1CF',
		'\x5', '\"', '\x12', '\x6', '\x1C8', '\x1C9', '\f', '\x4', '\x2', '\x2',
		'\x1C9', '\x1CA', '\t', '\x13', '\x2', '\x2', '\x1CA', '\x1CF', '\x5',
		'\"', '\x12', '\x5', '\x1CB', '\x1CC', '\f', '\x3', '\x2', '\x2', '\x1CC',
		'\x1CD', '\t', '\x14', '\x2', '\x2', '\x1CD', '\x1CF', '\x5', '\"', '\x12',
		'\x4', '\x1CE', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1C8',
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CB', '\x3', '\x2', '\x2', '\x2',
		'\x1CF', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CE', '\x3',
		'\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D1',
		'#', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D0', '\x3', '\x2', '\x2',
		'\x2', '(', ',', '=', '\x46', 'J', 'S', '[', '_', '\x66', 'k', 'r', 'w',
		'|', '\x83', '\x8D', '\x94', '\xA8', '\xAD', '\xBF', '\xC3', '\xEF', '\xF4',
		'\x102', '\x109', '\x111', '\x11A', '\x129', '\x13F', '\x14A', '\x14C',
		'\x170', '\x177', '\x18D', '\x1A8', '\x1AF', '\x1B1', '\x1C3', '\x1CE',
		'\x1D0',
	};

		public static readonly ATN _ATN =
			new ATNDeserializer().Deserialize(_serializedATN);


	}



}